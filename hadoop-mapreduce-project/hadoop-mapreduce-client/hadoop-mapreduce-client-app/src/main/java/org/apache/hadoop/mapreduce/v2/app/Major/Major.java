/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.mapreduce.v2.app.Major;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-21")
public class Major {

  public interface Iface {

    public boolean addApplication(int mapnum, String appid) throws org.apache.thrift.TException;

    public int assignContainerOnNodeManager(String nmid) throws org.apache.thrift.TException;

    public int assignContainerForAMOnNodeManager(String amid, String appid) throws org.apache.thrift.TException;

    public String chooseNodeToGetBlock(List<String> nodeids, String blockid, String hostname, String src, long offset, long length) throws org.apache.thrift.TException;

    public boolean updateNodeInfo(String nodeid, double bandwithused) throws org.apache.thrift.TException;

    public boolean updateTaskInfo(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory) throws org.apache.thrift.TException;

    public Map<String,String> getTaskAllocatedInfo(String appid, List<String> taskids) throws org.apache.thrift.TException;

    public boolean updateTaskBlockMap(String appid, Map<String,String> taskblockmap) throws org.apache.thrift.TException;

    public boolean justLog(String log) throws org.apache.thrift.TException;

    public boolean blockLoadCompleted(String blokid, String nodeid, String backup) throws org.apache.thrift.TException;

    public boolean updateSplits(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addApplication(int mapnum, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assignContainerOnNodeManager(String nmid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assignContainerForAMOnNodeManager(String amid, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void chooseNodeToGetBlock(List<String> nodeids, String blockid, String hostname, String src, long offset, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateNodeInfo(String nodeid, double bandwithused, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTaskInfo(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTaskAllocatedInfo(String appid, List<String> taskids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTaskBlockMap(String appid, Map<String,String> taskblockmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void justLog(String log, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void blockLoadCompleted(String blokid, String nodeid, String backup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSplits(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addApplication(int mapnum, String appid) throws org.apache.thrift.TException
    {
      send_addApplication(mapnum, appid);
      return recv_addApplication();
    }

    public void send_addApplication(int mapnum, String appid) throws org.apache.thrift.TException
    {
      addApplication_args args = new addApplication_args();
      args.setMapnum(mapnum);
      args.setAppid(appid);
      sendBase("addApplication", args);
    }

    public boolean recv_addApplication() throws org.apache.thrift.TException
    {
      addApplication_result result = new addApplication_result();
      receiveBase(result, "addApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addApplication failed: unknown result");
    }

    public int assignContainerOnNodeManager(String nmid) throws org.apache.thrift.TException
    {
      send_assignContainerOnNodeManager(nmid);
      return recv_assignContainerOnNodeManager();
    }

    public void send_assignContainerOnNodeManager(String nmid) throws org.apache.thrift.TException
    {
      assignContainerOnNodeManager_args args = new assignContainerOnNodeManager_args();
      args.setNmid(nmid);
      sendBase("assignContainerOnNodeManager", args);
    }

    public int recv_assignContainerOnNodeManager() throws org.apache.thrift.TException
    {
      assignContainerOnNodeManager_result result = new assignContainerOnNodeManager_result();
      receiveBase(result, "assignContainerOnNodeManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assignContainerOnNodeManager failed: unknown result");
    }

    public int assignContainerForAMOnNodeManager(String amid, String appid) throws org.apache.thrift.TException
    {
      send_assignContainerForAMOnNodeManager(amid, appid);
      return recv_assignContainerForAMOnNodeManager();
    }

    public void send_assignContainerForAMOnNodeManager(String amid, String appid) throws org.apache.thrift.TException
    {
      assignContainerForAMOnNodeManager_args args = new assignContainerForAMOnNodeManager_args();
      args.setAmid(amid);
      args.setAppid(appid);
      sendBase("assignContainerForAMOnNodeManager", args);
    }

    public int recv_assignContainerForAMOnNodeManager() throws org.apache.thrift.TException
    {
      assignContainerForAMOnNodeManager_result result = new assignContainerForAMOnNodeManager_result();
      receiveBase(result, "assignContainerForAMOnNodeManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assignContainerForAMOnNodeManager failed: unknown result");
    }

    public String chooseNodeToGetBlock(List<String> nodeids, String blockid, String hostname, String src, long offset, long length) throws org.apache.thrift.TException
    {
      send_chooseNodeToGetBlock(nodeids, blockid, hostname, src, offset, length);
      return recv_chooseNodeToGetBlock();
    }

    public void send_chooseNodeToGetBlock(List<String> nodeids, String blockid, String hostname, String src, long offset, long length) throws org.apache.thrift.TException
    {
      chooseNodeToGetBlock_args args = new chooseNodeToGetBlock_args();
      args.setNodeids(nodeids);
      args.setBlockid(blockid);
      args.setHostname(hostname);
      args.setSrc(src);
      args.setOffset(offset);
      args.setLength(length);
      sendBase("chooseNodeToGetBlock", args);
    }

    public String recv_chooseNodeToGetBlock() throws org.apache.thrift.TException
    {
      chooseNodeToGetBlock_result result = new chooseNodeToGetBlock_result();
      receiveBase(result, "chooseNodeToGetBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "chooseNodeToGetBlock failed: unknown result");
    }

    public boolean updateNodeInfo(String nodeid, double bandwithused) throws org.apache.thrift.TException
    {
      send_updateNodeInfo(nodeid, bandwithused);
      return recv_updateNodeInfo();
    }

    public void send_updateNodeInfo(String nodeid, double bandwithused) throws org.apache.thrift.TException
    {
      updateNodeInfo_args args = new updateNodeInfo_args();
      args.setNodeid(nodeid);
      args.setBandwithused(bandwithused);
      sendBase("updateNodeInfo", args);
    }

    public boolean recv_updateNodeInfo() throws org.apache.thrift.TException
    {
      updateNodeInfo_result result = new updateNodeInfo_result();
      receiveBase(result, "updateNodeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNodeInfo failed: unknown result");
    }

    public boolean updateTaskInfo(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory) throws org.apache.thrift.TException
    {
      send_updateTaskInfo(appid, taskinfo, totalContainers, core, memory);
      return recv_updateTaskInfo();
    }

    public void send_updateTaskInfo(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory) throws org.apache.thrift.TException
    {
      updateTaskInfo_args args = new updateTaskInfo_args();
      args.setAppid(appid);
      args.setTaskinfo(taskinfo);
      args.setTotalContainers(totalContainers);
      args.setCore(core);
      args.setMemory(memory);
      sendBase("updateTaskInfo", args);
    }

    public boolean recv_updateTaskInfo() throws org.apache.thrift.TException
    {
      updateTaskInfo_result result = new updateTaskInfo_result();
      receiveBase(result, "updateTaskInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTaskInfo failed: unknown result");
    }

    public Map<String,String> getTaskAllocatedInfo(String appid, List<String> taskids) throws org.apache.thrift.TException
    {
      send_getTaskAllocatedInfo(appid, taskids);
      return recv_getTaskAllocatedInfo();
    }

    public void send_getTaskAllocatedInfo(String appid, List<String> taskids) throws org.apache.thrift.TException
    {
      getTaskAllocatedInfo_args args = new getTaskAllocatedInfo_args();
      args.setAppid(appid);
      args.setTaskids(taskids);
      sendBase("getTaskAllocatedInfo", args);
    }

    public Map<String,String> recv_getTaskAllocatedInfo() throws org.apache.thrift.TException
    {
      getTaskAllocatedInfo_result result = new getTaskAllocatedInfo_result();
      receiveBase(result, "getTaskAllocatedInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskAllocatedInfo failed: unknown result");
    }

    public boolean updateTaskBlockMap(String appid, Map<String,String> taskblockmap) throws org.apache.thrift.TException
    {
      send_updateTaskBlockMap(appid, taskblockmap);
      return recv_updateTaskBlockMap();
    }

    public void send_updateTaskBlockMap(String appid, Map<String,String> taskblockmap) throws org.apache.thrift.TException
    {
      updateTaskBlockMap_args args = new updateTaskBlockMap_args();
      args.setAppid(appid);
      args.setTaskblockmap(taskblockmap);
      sendBase("updateTaskBlockMap", args);
    }

    public boolean recv_updateTaskBlockMap() throws org.apache.thrift.TException
    {
      updateTaskBlockMap_result result = new updateTaskBlockMap_result();
      receiveBase(result, "updateTaskBlockMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTaskBlockMap failed: unknown result");
    }

    public boolean justLog(String log) throws org.apache.thrift.TException
    {
      send_justLog(log);
      return recv_justLog();
    }

    public void send_justLog(String log) throws org.apache.thrift.TException
    {
      justLog_args args = new justLog_args();
      args.setLog(log);
      sendBase("justLog", args);
    }

    public boolean recv_justLog() throws org.apache.thrift.TException
    {
      justLog_result result = new justLog_result();
      receiveBase(result, "justLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "justLog failed: unknown result");
    }

    public boolean blockLoadCompleted(String blokid, String nodeid, String backup) throws org.apache.thrift.TException
    {
      send_blockLoadCompleted(blokid, nodeid, backup);
      return recv_blockLoadCompleted();
    }

    public void send_blockLoadCompleted(String blokid, String nodeid, String backup) throws org.apache.thrift.TException
    {
      blockLoadCompleted_args args = new blockLoadCompleted_args();
      args.setBlokid(blokid);
      args.setNodeid(nodeid);
      args.setBackup(backup);
      sendBase("blockLoadCompleted", args);
    }

    public boolean recv_blockLoadCompleted() throws org.apache.thrift.TException
    {
      blockLoadCompleted_result result = new blockLoadCompleted_result();
      receiveBase(result, "blockLoadCompleted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "blockLoadCompleted failed: unknown result");
    }

    public boolean updateSplits(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length) throws org.apache.thrift.TException
    {
      send_updateSplits(appid, src, locations, offset, length);
      return recv_updateSplits();
    }

    public void send_updateSplits(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length) throws org.apache.thrift.TException
    {
      updateSplits_args args = new updateSplits_args();
      args.setAppid(appid);
      args.setSrc(src);
      args.setLocations(locations);
      args.setOffset(offset);
      args.setLength(length);
      sendBase("updateSplits", args);
    }

    public boolean recv_updateSplits() throws org.apache.thrift.TException
    {
      updateSplits_result result = new updateSplits_result();
      receiveBase(result, "updateSplits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSplits failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addApplication(int mapnum, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addApplication_call method_call = new addApplication_call(mapnum, appid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int mapnum;
      private String appid;
      public addApplication_call(int mapnum, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mapnum = mapnum;
        this.appid = appid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addApplication_args args = new addApplication_args();
        args.setMapnum(mapnum);
        args.setAppid(appid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addApplication();
      }
    }

    public void assignContainerOnNodeManager(String nmid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assignContainerOnNodeManager_call method_call = new assignContainerOnNodeManager_call(nmid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assignContainerOnNodeManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nmid;
      public assignContainerOnNodeManager_call(String nmid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nmid = nmid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assignContainerOnNodeManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assignContainerOnNodeManager_args args = new assignContainerOnNodeManager_args();
        args.setNmid(nmid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assignContainerOnNodeManager();
      }
    }

    public void assignContainerForAMOnNodeManager(String amid, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assignContainerForAMOnNodeManager_call method_call = new assignContainerForAMOnNodeManager_call(amid, appid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assignContainerForAMOnNodeManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String amid;
      private String appid;
      public assignContainerForAMOnNodeManager_call(String amid, String appid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.amid = amid;
        this.appid = appid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assignContainerForAMOnNodeManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assignContainerForAMOnNodeManager_args args = new assignContainerForAMOnNodeManager_args();
        args.setAmid(amid);
        args.setAppid(appid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assignContainerForAMOnNodeManager();
      }
    }

    public void chooseNodeToGetBlock(List<String> nodeids, String blockid, String hostname, String src, long offset, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      chooseNodeToGetBlock_call method_call = new chooseNodeToGetBlock_call(nodeids, blockid, hostname, src, offset, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class chooseNodeToGetBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> nodeids;
      private String blockid;
      private String hostname;
      private String src;
      private long offset;
      private long length;
      public chooseNodeToGetBlock_call(List<String> nodeids, String blockid, String hostname, String src, long offset, long length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeids = nodeids;
        this.blockid = blockid;
        this.hostname = hostname;
        this.src = src;
        this.offset = offset;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("chooseNodeToGetBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        chooseNodeToGetBlock_args args = new chooseNodeToGetBlock_args();
        args.setNodeids(nodeids);
        args.setBlockid(blockid);
        args.setHostname(hostname);
        args.setSrc(src);
        args.setOffset(offset);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_chooseNodeToGetBlock();
      }
    }

    public void updateNodeInfo(String nodeid, double bandwithused, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNodeInfo_call method_call = new updateNodeInfo_call(nodeid, bandwithused, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeid;
      private double bandwithused;
      public updateNodeInfo_call(String nodeid, double bandwithused, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeid = nodeid;
        this.bandwithused = bandwithused;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNodeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNodeInfo_args args = new updateNodeInfo_args();
        args.setNodeid(nodeid);
        args.setBandwithused(bandwithused);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNodeInfo();
      }
    }

    public void updateTaskInfo(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTaskInfo_call method_call = new updateTaskInfo_call(appid, taskinfo, totalContainers, core, memory, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private Map<String,List<String>> taskinfo;
      private int totalContainers;
      private int core;
      private int memory;
      public updateTaskInfo_call(String appid, Map<String,List<String>> taskinfo, int totalContainers, int core, int memory, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.taskinfo = taskinfo;
        this.totalContainers = totalContainers;
        this.core = core;
        this.memory = memory;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskInfo_args args = new updateTaskInfo_args();
        args.setAppid(appid);
        args.setTaskinfo(taskinfo);
        args.setTotalContainers(totalContainers);
        args.setCore(core);
        args.setMemory(memory);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTaskInfo();
      }
    }

    public void getTaskAllocatedInfo(String appid, List<String> taskids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskAllocatedInfo_call method_call = new getTaskAllocatedInfo_call(appid, taskids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskAllocatedInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private List<String> taskids;
      public getTaskAllocatedInfo_call(String appid, List<String> taskids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.taskids = taskids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskAllocatedInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskAllocatedInfo_args args = new getTaskAllocatedInfo_args();
        args.setAppid(appid);
        args.setTaskids(taskids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskAllocatedInfo();
      }
    }

    public void updateTaskBlockMap(String appid, Map<String,String> taskblockmap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTaskBlockMap_call method_call = new updateTaskBlockMap_call(appid, taskblockmap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTaskBlockMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private Map<String,String> taskblockmap;
      public updateTaskBlockMap_call(String appid, Map<String,String> taskblockmap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.taskblockmap = taskblockmap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTaskBlockMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTaskBlockMap_args args = new updateTaskBlockMap_args();
        args.setAppid(appid);
        args.setTaskblockmap(taskblockmap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTaskBlockMap();
      }
    }

    public void justLog(String log, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      justLog_call method_call = new justLog_call(log, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class justLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String log;
      public justLog_call(String log, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.log = log;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("justLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        justLog_args args = new justLog_args();
        args.setLog(log);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_justLog();
      }
    }

    public void blockLoadCompleted(String blokid, String nodeid, String backup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      blockLoadCompleted_call method_call = new blockLoadCompleted_call(blokid, nodeid, backup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class blockLoadCompleted_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String blokid;
      private String nodeid;
      private String backup;
      public blockLoadCompleted_call(String blokid, String nodeid, String backup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.blokid = blokid;
        this.nodeid = nodeid;
        this.backup = backup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("blockLoadCompleted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        blockLoadCompleted_args args = new blockLoadCompleted_args();
        args.setBlokid(blokid);
        args.setNodeid(nodeid);
        args.setBackup(backup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_blockLoadCompleted();
      }
    }

    public void updateSplits(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSplits_call method_call = new updateSplits_call(appid, src, locations, offset, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSplits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appid;
      private Map<String,String> src;
      private Map<String,List<String>> locations;
      private Map<String,Long> offset;
      private Map<String,Long> length;
      public updateSplits_call(String appid, Map<String,String> src, Map<String,List<String>> locations, Map<String,Long> offset, Map<String,Long> length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appid = appid;
        this.src = src;
        this.locations = locations;
        this.offset = offset;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSplits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSplits_args args = new updateSplits_args();
        args.setAppid(appid);
        args.setSrc(src);
        args.setLocations(locations);
        args.setOffset(offset);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSplits();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addApplication", new addApplication());
      processMap.put("assignContainerOnNodeManager", new assignContainerOnNodeManager());
      processMap.put("assignContainerForAMOnNodeManager", new assignContainerForAMOnNodeManager());
      processMap.put("chooseNodeToGetBlock", new chooseNodeToGetBlock());
      processMap.put("updateNodeInfo", new updateNodeInfo());
      processMap.put("updateTaskInfo", new updateTaskInfo());
      processMap.put("getTaskAllocatedInfo", new getTaskAllocatedInfo());
      processMap.put("updateTaskBlockMap", new updateTaskBlockMap());
      processMap.put("justLog", new justLog());
      processMap.put("blockLoadCompleted", new blockLoadCompleted());
      processMap.put("updateSplits", new updateSplits());
      return processMap;
    }

    public static class addApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addApplication_args> {
      public addApplication() {
        super("addApplication");
      }

      public addApplication_args getEmptyArgsInstance() {
        return new addApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addApplication_result getResult(I iface, addApplication_args args) throws org.apache.thrift.TException {
        addApplication_result result = new addApplication_result();
        result.success = iface.addApplication(args.mapnum, args.appid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class assignContainerOnNodeManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assignContainerOnNodeManager_args> {
      public assignContainerOnNodeManager() {
        super("assignContainerOnNodeManager");
      }

      public assignContainerOnNodeManager_args getEmptyArgsInstance() {
        return new assignContainerOnNodeManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assignContainerOnNodeManager_result getResult(I iface, assignContainerOnNodeManager_args args) throws org.apache.thrift.TException {
        assignContainerOnNodeManager_result result = new assignContainerOnNodeManager_result();
        result.success = iface.assignContainerOnNodeManager(args.nmid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class assignContainerForAMOnNodeManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assignContainerForAMOnNodeManager_args> {
      public assignContainerForAMOnNodeManager() {
        super("assignContainerForAMOnNodeManager");
      }

      public assignContainerForAMOnNodeManager_args getEmptyArgsInstance() {
        return new assignContainerForAMOnNodeManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assignContainerForAMOnNodeManager_result getResult(I iface, assignContainerForAMOnNodeManager_args args) throws org.apache.thrift.TException {
        assignContainerForAMOnNodeManager_result result = new assignContainerForAMOnNodeManager_result();
        result.success = iface.assignContainerForAMOnNodeManager(args.amid, args.appid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class chooseNodeToGetBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, chooseNodeToGetBlock_args> {
      public chooseNodeToGetBlock() {
        super("chooseNodeToGetBlock");
      }

      public chooseNodeToGetBlock_args getEmptyArgsInstance() {
        return new chooseNodeToGetBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public chooseNodeToGetBlock_result getResult(I iface, chooseNodeToGetBlock_args args) throws org.apache.thrift.TException {
        chooseNodeToGetBlock_result result = new chooseNodeToGetBlock_result();
        result.success = iface.chooseNodeToGetBlock(args.nodeids, args.blockid, args.hostname, args.src, args.offset, args.length);
        return result;
      }
    }

    public static class updateNodeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNodeInfo_args> {
      public updateNodeInfo() {
        super("updateNodeInfo");
      }

      public updateNodeInfo_args getEmptyArgsInstance() {
        return new updateNodeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateNodeInfo_result getResult(I iface, updateNodeInfo_args args) throws org.apache.thrift.TException {
        updateNodeInfo_result result = new updateNodeInfo_result();
        result.success = iface.updateNodeInfo(args.nodeid, args.bandwithused);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateTaskInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskInfo_args> {
      public updateTaskInfo() {
        super("updateTaskInfo");
      }

      public updateTaskInfo_args getEmptyArgsInstance() {
        return new updateTaskInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskInfo_result getResult(I iface, updateTaskInfo_args args) throws org.apache.thrift.TException {
        updateTaskInfo_result result = new updateTaskInfo_result();
        result.success = iface.updateTaskInfo(args.appid, args.taskinfo, args.totalContainers, args.core, args.memory);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTaskAllocatedInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskAllocatedInfo_args> {
      public getTaskAllocatedInfo() {
        super("getTaskAllocatedInfo");
      }

      public getTaskAllocatedInfo_args getEmptyArgsInstance() {
        return new getTaskAllocatedInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTaskAllocatedInfo_result getResult(I iface, getTaskAllocatedInfo_args args) throws org.apache.thrift.TException {
        getTaskAllocatedInfo_result result = new getTaskAllocatedInfo_result();
        result.success = iface.getTaskAllocatedInfo(args.appid, args.taskids);
        return result;
      }
    }

    public static class updateTaskBlockMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTaskBlockMap_args> {
      public updateTaskBlockMap() {
        super("updateTaskBlockMap");
      }

      public updateTaskBlockMap_args getEmptyArgsInstance() {
        return new updateTaskBlockMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTaskBlockMap_result getResult(I iface, updateTaskBlockMap_args args) throws org.apache.thrift.TException {
        updateTaskBlockMap_result result = new updateTaskBlockMap_result();
        result.success = iface.updateTaskBlockMap(args.appid, args.taskblockmap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class justLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, justLog_args> {
      public justLog() {
        super("justLog");
      }

      public justLog_args getEmptyArgsInstance() {
        return new justLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public justLog_result getResult(I iface, justLog_args args) throws org.apache.thrift.TException {
        justLog_result result = new justLog_result();
        result.success = iface.justLog(args.log);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class blockLoadCompleted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, blockLoadCompleted_args> {
      public blockLoadCompleted() {
        super("blockLoadCompleted");
      }

      public blockLoadCompleted_args getEmptyArgsInstance() {
        return new blockLoadCompleted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public blockLoadCompleted_result getResult(I iface, blockLoadCompleted_args args) throws org.apache.thrift.TException {
        blockLoadCompleted_result result = new blockLoadCompleted_result();
        result.success = iface.blockLoadCompleted(args.blokid, args.nodeid, args.backup);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateSplits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSplits_args> {
      public updateSplits() {
        super("updateSplits");
      }

      public updateSplits_args getEmptyArgsInstance() {
        return new updateSplits_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSplits_result getResult(I iface, updateSplits_args args) throws org.apache.thrift.TException {
        updateSplits_result result = new updateSplits_result();
        result.success = iface.updateSplits(args.appid, args.src, args.locations, args.offset, args.length);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addApplication", new addApplication());
      processMap.put("assignContainerOnNodeManager", new assignContainerOnNodeManager());
      processMap.put("assignContainerForAMOnNodeManager", new assignContainerForAMOnNodeManager());
      processMap.put("chooseNodeToGetBlock", new chooseNodeToGetBlock());
      processMap.put("updateNodeInfo", new updateNodeInfo());
      processMap.put("updateTaskInfo", new updateTaskInfo());
      processMap.put("getTaskAllocatedInfo", new getTaskAllocatedInfo());
      processMap.put("updateTaskBlockMap", new updateTaskBlockMap());
      processMap.put("justLog", new justLog());
      processMap.put("blockLoadCompleted", new blockLoadCompleted());
      processMap.put("updateSplits", new updateSplits());
      return processMap;
    }

    public static class addApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addApplication_args, Boolean> {
      public addApplication() {
        super("addApplication");
      }

      public addApplication_args getEmptyArgsInstance() {
        return new addApplication_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            addApplication_result result = new addApplication_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addApplication_result result = new addApplication_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addApplication_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addApplication(args.mapnum, args.appid,resultHandler);
      }
    }

    public static class assignContainerOnNodeManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assignContainerOnNodeManager_args, Integer> {
      public assignContainerOnNodeManager() {
        super("assignContainerOnNodeManager");
      }

      public assignContainerOnNodeManager_args getEmptyArgsInstance() {
        return new assignContainerOnNodeManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            assignContainerOnNodeManager_result result = new assignContainerOnNodeManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assignContainerOnNodeManager_result result = new assignContainerOnNodeManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assignContainerOnNodeManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.assignContainerOnNodeManager(args.nmid,resultHandler);
      }
    }

    public static class assignContainerForAMOnNodeManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assignContainerForAMOnNodeManager_args, Integer> {
      public assignContainerForAMOnNodeManager() {
        super("assignContainerForAMOnNodeManager");
      }

      public assignContainerForAMOnNodeManager_args getEmptyArgsInstance() {
        return new assignContainerForAMOnNodeManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            assignContainerForAMOnNodeManager_result result = new assignContainerForAMOnNodeManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assignContainerForAMOnNodeManager_result result = new assignContainerForAMOnNodeManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assignContainerForAMOnNodeManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.assignContainerForAMOnNodeManager(args.amid, args.appid,resultHandler);
      }
    }

    public static class chooseNodeToGetBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, chooseNodeToGetBlock_args, String> {
      public chooseNodeToGetBlock() {
        super("chooseNodeToGetBlock");
      }

      public chooseNodeToGetBlock_args getEmptyArgsInstance() {
        return new chooseNodeToGetBlock_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            chooseNodeToGetBlock_result result = new chooseNodeToGetBlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            chooseNodeToGetBlock_result result = new chooseNodeToGetBlock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, chooseNodeToGetBlock_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.chooseNodeToGetBlock(args.nodeids, args.blockid, args.hostname, args.src, args.offset, args.length,resultHandler);
      }
    }

    public static class updateNodeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNodeInfo_args, Boolean> {
      public updateNodeInfo() {
        super("updateNodeInfo");
      }

      public updateNodeInfo_args getEmptyArgsInstance() {
        return new updateNodeInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateNodeInfo_result result = new updateNodeInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateNodeInfo_result result = new updateNodeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNodeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateNodeInfo(args.nodeid, args.bandwithused,resultHandler);
      }
    }

    public static class updateTaskInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTaskInfo_args, Boolean> {
      public updateTaskInfo() {
        super("updateTaskInfo");
      }

      public updateTaskInfo_args getEmptyArgsInstance() {
        return new updateTaskInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateTaskInfo_result result = new updateTaskInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTaskInfo_result result = new updateTaskInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTaskInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateTaskInfo(args.appid, args.taskinfo, args.totalContainers, args.core, args.memory,resultHandler);
      }
    }

    public static class getTaskAllocatedInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTaskAllocatedInfo_args, Map<String,String>> {
      public getTaskAllocatedInfo() {
        super("getTaskAllocatedInfo");
      }

      public getTaskAllocatedInfo_args getEmptyArgsInstance() {
        return new getTaskAllocatedInfo_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() {
          public void onComplete(Map<String,String> o) {
            getTaskAllocatedInfo_result result = new getTaskAllocatedInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTaskAllocatedInfo_result result = new getTaskAllocatedInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTaskAllocatedInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.getTaskAllocatedInfo(args.appid, args.taskids,resultHandler);
      }
    }

    public static class updateTaskBlockMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTaskBlockMap_args, Boolean> {
      public updateTaskBlockMap() {
        super("updateTaskBlockMap");
      }

      public updateTaskBlockMap_args getEmptyArgsInstance() {
        return new updateTaskBlockMap_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateTaskBlockMap_result result = new updateTaskBlockMap_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTaskBlockMap_result result = new updateTaskBlockMap_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTaskBlockMap_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateTaskBlockMap(args.appid, args.taskblockmap,resultHandler);
      }
    }

    public static class justLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, justLog_args, Boolean> {
      public justLog() {
        super("justLog");
      }

      public justLog_args getEmptyArgsInstance() {
        return new justLog_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            justLog_result result = new justLog_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            justLog_result result = new justLog_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, justLog_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.justLog(args.log,resultHandler);
      }
    }

    public static class blockLoadCompleted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, blockLoadCompleted_args, Boolean> {
      public blockLoadCompleted() {
        super("blockLoadCompleted");
      }

      public blockLoadCompleted_args getEmptyArgsInstance() {
        return new blockLoadCompleted_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            blockLoadCompleted_result result = new blockLoadCompleted_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            blockLoadCompleted_result result = new blockLoadCompleted_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, blockLoadCompleted_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.blockLoadCompleted(args.blokid, args.nodeid, args.backup,resultHandler);
      }
    }

    public static class updateSplits<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSplits_args, Boolean> {
      public updateSplits() {
        super("updateSplits");
      }

      public updateSplits_args getEmptyArgsInstance() {
        return new updateSplits_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            updateSplits_result result = new updateSplits_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSplits_result result = new updateSplits_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSplits_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateSplits(args.appid, args.src, args.locations, args.offset, args.length,resultHandler);
      }
    }

  }

  public static class addApplication_args implements org.apache.thrift.TBase<addApplication_args, addApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<addApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplication_args");

    private static final org.apache.thrift.protocol.TField MAPNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("mapnum", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplication_argsTupleSchemeFactory());
    }

    public int mapnum; // required
    public String appid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPNUM((short)1, "mapnum"),
      APPID((short)2, "appid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPNUM
            return MAPNUM;
          case 2: // APPID
            return APPID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAPNUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPNUM, new org.apache.thrift.meta_data.FieldMetaData("mapnum", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplication_args.class, metaDataMap);
    }

    public addApplication_args() {
    }

    public addApplication_args(
            int mapnum,
            String appid)
    {
      this();
      this.mapnum = mapnum;
      setMapnumIsSet(true);
      this.appid = appid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplication_args(addApplication_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mapnum = other.mapnum;
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
    }

    public addApplication_args deepCopy() {
      return new addApplication_args(this);
    }

    @Override
    public void clear() {
      setMapnumIsSet(false);
      this.mapnum = 0;
      this.appid = null;
    }

    public int getMapnum() {
      return this.mapnum;
    }

    public addApplication_args setMapnum(int mapnum) {
      this.mapnum = mapnum;
      setMapnumIsSet(true);
      return this;
    }

    public void unsetMapnum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPNUM_ISSET_ID);
    }

    /** Returns true if field mapnum is set (has been assigned a value) and false otherwise */
    public boolean isSetMapnum() {
      return EncodingUtils.testBit(__isset_bitfield, __MAPNUM_ISSET_ID);
    }

    public void setMapnumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPNUM_ISSET_ID, value);
    }

    public String getAppid() {
      return this.appid;
    }

    public addApplication_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case MAPNUM:
          if (value == null) {
            unsetMapnum();
          } else {
            setMapnum((Integer)value);
          }
          break;

        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case MAPNUM:
          return getMapnum();

        case APPID:
          return getAppid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case MAPNUM:
          return isSetMapnum();
        case APPID:
          return isSetAppid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplication_args)
        return this.equals((addApplication_args)that);
      return false;
    }

    public boolean equals(addApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_mapnum = true;
      boolean that_present_mapnum = true;
      if (this_present_mapnum || that_present_mapnum) {
        if (!(this_present_mapnum && that_present_mapnum))
          return false;
        if (this.mapnum != that.mapnum)
          return false;
      }

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mapnum = true;
      list.add(present_mapnum);
      if (present_mapnum)
        list.add(mapnum);

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMapnum()).compareTo(other.isSetMapnum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapnum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapnum, other.mapnum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplication_args(");
      boolean first = true;

      sb.append("mapnum:");
      sb.append(this.mapnum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplication_argsStandardSchemeFactory implements SchemeFactory {
      public addApplication_argsStandardScheme getScheme() {
        return new addApplication_argsStandardScheme();
      }
    }

    private static class addApplication_argsStandardScheme extends StandardScheme<addApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPNUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mapnum = iprot.readI32();
                struct.setMapnumIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MAPNUM_FIELD_DESC);
        oprot.writeI32(struct.mapnum);
        oprot.writeFieldEnd();
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplication_argsTupleSchemeFactory implements SchemeFactory {
      public addApplication_argsTupleScheme getScheme() {
        return new addApplication_argsTupleScheme();
      }
    }

    private static class addApplication_argsTupleScheme extends TupleScheme<addApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMapnum()) {
          optionals.set(0);
        }
        if (struct.isSetAppid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMapnum()) {
          oprot.writeI32(struct.mapnum);
        }
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mapnum = iprot.readI32();
          struct.setMapnumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
      }
    }

  }

  public static class addApplication_result implements org.apache.thrift.TBase<addApplication_result, addApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<addApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addApplication_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addApplication_result.class, metaDataMap);
    }

    public addApplication_result() {
    }

    public addApplication_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addApplication_result(addApplication_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addApplication_result deepCopy() {
      return new addApplication_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addApplication_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addApplication_result)
        return this.equals((addApplication_result)that);
      return false;
    }

    public boolean equals(addApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addApplication_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addApplication_resultStandardSchemeFactory implements SchemeFactory {
      public addApplication_resultStandardScheme getScheme() {
        return new addApplication_resultStandardScheme();
      }
    }

    private static class addApplication_resultStandardScheme extends StandardScheme<addApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addApplication_resultTupleSchemeFactory implements SchemeFactory {
      public addApplication_resultTupleScheme getScheme() {
        return new addApplication_resultTupleScheme();
      }
    }

    private static class addApplication_resultTupleScheme extends TupleScheme<addApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assignContainerOnNodeManager_args implements org.apache.thrift.TBase<assignContainerOnNodeManager_args, assignContainerOnNodeManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<assignContainerOnNodeManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignContainerOnNodeManager_args");

    private static final org.apache.thrift.protocol.TField NMID_FIELD_DESC = new org.apache.thrift.protocol.TField("nmid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignContainerOnNodeManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignContainerOnNodeManager_argsTupleSchemeFactory());
    }

    public String nmid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NMID((short)1, "nmid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NMID
            return NMID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NMID, new org.apache.thrift.meta_data.FieldMetaData("nmid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignContainerOnNodeManager_args.class, metaDataMap);
    }

    public assignContainerOnNodeManager_args() {
    }

    public assignContainerOnNodeManager_args(
            String nmid)
    {
      this();
      this.nmid = nmid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignContainerOnNodeManager_args(assignContainerOnNodeManager_args other) {
      if (other.isSetNmid()) {
        this.nmid = other.nmid;
      }
    }

    public assignContainerOnNodeManager_args deepCopy() {
      return new assignContainerOnNodeManager_args(this);
    }

    @Override
    public void clear() {
      this.nmid = null;
    }

    public String getNmid() {
      return this.nmid;
    }

    public assignContainerOnNodeManager_args setNmid(String nmid) {
      this.nmid = nmid;
      return this;
    }

    public void unsetNmid() {
      this.nmid = null;
    }

    /** Returns true if field nmid is set (has been assigned a value) and false otherwise */
    public boolean isSetNmid() {
      return this.nmid != null;
    }

    public void setNmidIsSet(boolean value) {
      if (!value) {
        this.nmid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case NMID:
          if (value == null) {
            unsetNmid();
          } else {
            setNmid((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case NMID:
          return getNmid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case NMID:
          return isSetNmid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignContainerOnNodeManager_args)
        return this.equals((assignContainerOnNodeManager_args)that);
      return false;
    }

    public boolean equals(assignContainerOnNodeManager_args that) {
      if (that == null)
        return false;

      boolean this_present_nmid = true && this.isSetNmid();
      boolean that_present_nmid = true && that.isSetNmid();
      if (this_present_nmid || that_present_nmid) {
        if (!(this_present_nmid && that_present_nmid))
          return false;
        if (!this.nmid.equals(that.nmid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nmid = true && (isSetNmid());
      list.add(present_nmid);
      if (present_nmid)
        list.add(nmid);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignContainerOnNodeManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNmid()).compareTo(other.isSetNmid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNmid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nmid, other.nmid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignContainerOnNodeManager_args(");
      boolean first = true;

      sb.append("nmid:");
      if (this.nmid == null) {
        sb.append("null");
      } else {
        sb.append(this.nmid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignContainerOnNodeManager_argsStandardSchemeFactory implements SchemeFactory {
      public assignContainerOnNodeManager_argsStandardScheme getScheme() {
        return new assignContainerOnNodeManager_argsStandardScheme();
      }
    }

    private static class assignContainerOnNodeManager_argsStandardScheme extends StandardScheme<assignContainerOnNodeManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignContainerOnNodeManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // NMID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nmid = iprot.readString();
                struct.setNmidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignContainerOnNodeManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nmid != null) {
          oprot.writeFieldBegin(NMID_FIELD_DESC);
          oprot.writeString(struct.nmid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignContainerOnNodeManager_argsTupleSchemeFactory implements SchemeFactory {
      public assignContainerOnNodeManager_argsTupleScheme getScheme() {
        return new assignContainerOnNodeManager_argsTupleScheme();
      }
    }

    private static class assignContainerOnNodeManager_argsTupleScheme extends TupleScheme<assignContainerOnNodeManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignContainerOnNodeManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNmid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNmid()) {
          oprot.writeString(struct.nmid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignContainerOnNodeManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nmid = iprot.readString();
          struct.setNmidIsSet(true);
        }
      }
    }

  }

  public static class assignContainerOnNodeManager_result implements org.apache.thrift.TBase<assignContainerOnNodeManager_result, assignContainerOnNodeManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<assignContainerOnNodeManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignContainerOnNodeManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignContainerOnNodeManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignContainerOnNodeManager_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignContainerOnNodeManager_result.class, metaDataMap);
    }

    public assignContainerOnNodeManager_result() {
    }

    public assignContainerOnNodeManager_result(
            int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignContainerOnNodeManager_result(assignContainerOnNodeManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public assignContainerOnNodeManager_result deepCopy() {
      return new assignContainerOnNodeManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public assignContainerOnNodeManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignContainerOnNodeManager_result)
        return this.equals((assignContainerOnNodeManager_result)that);
      return false;
    }

    public boolean equals(assignContainerOnNodeManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignContainerOnNodeManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignContainerOnNodeManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignContainerOnNodeManager_resultStandardSchemeFactory implements SchemeFactory {
      public assignContainerOnNodeManager_resultStandardScheme getScheme() {
        return new assignContainerOnNodeManager_resultStandardScheme();
      }
    }

    private static class assignContainerOnNodeManager_resultStandardScheme extends StandardScheme<assignContainerOnNodeManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignContainerOnNodeManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignContainerOnNodeManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignContainerOnNodeManager_resultTupleSchemeFactory implements SchemeFactory {
      public assignContainerOnNodeManager_resultTupleScheme getScheme() {
        return new assignContainerOnNodeManager_resultTupleScheme();
      }
    }

    private static class assignContainerOnNodeManager_resultTupleScheme extends TupleScheme<assignContainerOnNodeManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignContainerOnNodeManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignContainerOnNodeManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class assignContainerForAMOnNodeManager_args implements org.apache.thrift.TBase<assignContainerForAMOnNodeManager_args, assignContainerForAMOnNodeManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<assignContainerForAMOnNodeManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignContainerForAMOnNodeManager_args");

    private static final org.apache.thrift.protocol.TField AMID_FIELD_DESC = new org.apache.thrift.protocol.TField("amid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignContainerForAMOnNodeManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignContainerForAMOnNodeManager_argsTupleSchemeFactory());
    }

    public String amid; // required
    public String appid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AMID((short)1, "amid"),
      APPID((short)2, "appid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AMID
            return AMID;
          case 2: // APPID
            return APPID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AMID, new org.apache.thrift.meta_data.FieldMetaData("amid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignContainerForAMOnNodeManager_args.class, metaDataMap);
    }

    public assignContainerForAMOnNodeManager_args() {
    }

    public assignContainerForAMOnNodeManager_args(
            String amid,
            String appid)
    {
      this();
      this.amid = amid;
      this.appid = appid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignContainerForAMOnNodeManager_args(assignContainerForAMOnNodeManager_args other) {
      if (other.isSetAmid()) {
        this.amid = other.amid;
      }
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
    }

    public assignContainerForAMOnNodeManager_args deepCopy() {
      return new assignContainerForAMOnNodeManager_args(this);
    }

    @Override
    public void clear() {
      this.amid = null;
      this.appid = null;
    }

    public String getAmid() {
      return this.amid;
    }

    public assignContainerForAMOnNodeManager_args setAmid(String amid) {
      this.amid = amid;
      return this;
    }

    public void unsetAmid() {
      this.amid = null;
    }

    /** Returns true if field amid is set (has been assigned a value) and false otherwise */
    public boolean isSetAmid() {
      return this.amid != null;
    }

    public void setAmidIsSet(boolean value) {
      if (!value) {
        this.amid = null;
      }
    }

    public String getAppid() {
      return this.appid;
    }

    public assignContainerForAMOnNodeManager_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case AMID:
          if (value == null) {
            unsetAmid();
          } else {
            setAmid((String)value);
          }
          break;

        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case AMID:
          return getAmid();

        case APPID:
          return getAppid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case AMID:
          return isSetAmid();
        case APPID:
          return isSetAppid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignContainerForAMOnNodeManager_args)
        return this.equals((assignContainerForAMOnNodeManager_args)that);
      return false;
    }

    public boolean equals(assignContainerForAMOnNodeManager_args that) {
      if (that == null)
        return false;

      boolean this_present_amid = true && this.isSetAmid();
      boolean that_present_amid = true && that.isSetAmid();
      if (this_present_amid || that_present_amid) {
        if (!(this_present_amid && that_present_amid))
          return false;
        if (!this.amid.equals(that.amid))
          return false;
      }

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_amid = true && (isSetAmid());
      list.add(present_amid);
      if (present_amid)
        list.add(amid);

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignContainerForAMOnNodeManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAmid()).compareTo(other.isSetAmid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amid, other.amid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignContainerForAMOnNodeManager_args(");
      boolean first = true;

      sb.append("amid:");
      if (this.amid == null) {
        sb.append("null");
      } else {
        sb.append(this.amid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignContainerForAMOnNodeManager_argsStandardSchemeFactory implements SchemeFactory {
      public assignContainerForAMOnNodeManager_argsStandardScheme getScheme() {
        return new assignContainerForAMOnNodeManager_argsStandardScheme();
      }
    }

    private static class assignContainerForAMOnNodeManager_argsStandardScheme extends StandardScheme<assignContainerForAMOnNodeManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignContainerForAMOnNodeManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // AMID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.amid = iprot.readString();
                struct.setAmidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignContainerForAMOnNodeManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.amid != null) {
          oprot.writeFieldBegin(AMID_FIELD_DESC);
          oprot.writeString(struct.amid);
          oprot.writeFieldEnd();
        }
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignContainerForAMOnNodeManager_argsTupleSchemeFactory implements SchemeFactory {
      public assignContainerForAMOnNodeManager_argsTupleScheme getScheme() {
        return new assignContainerForAMOnNodeManager_argsTupleScheme();
      }
    }

    private static class assignContainerForAMOnNodeManager_argsTupleScheme extends TupleScheme<assignContainerForAMOnNodeManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignContainerForAMOnNodeManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAmid()) {
          optionals.set(0);
        }
        if (struct.isSetAppid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAmid()) {
          oprot.writeString(struct.amid);
        }
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignContainerForAMOnNodeManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.amid = iprot.readString();
          struct.setAmidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
      }
    }

  }

  public static class assignContainerForAMOnNodeManager_result implements org.apache.thrift.TBase<assignContainerForAMOnNodeManager_result, assignContainerForAMOnNodeManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<assignContainerForAMOnNodeManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignContainerForAMOnNodeManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignContainerForAMOnNodeManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignContainerForAMOnNodeManager_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignContainerForAMOnNodeManager_result.class, metaDataMap);
    }

    public assignContainerForAMOnNodeManager_result() {
    }

    public assignContainerForAMOnNodeManager_result(
            int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignContainerForAMOnNodeManager_result(assignContainerForAMOnNodeManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public assignContainerForAMOnNodeManager_result deepCopy() {
      return new assignContainerForAMOnNodeManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public assignContainerForAMOnNodeManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignContainerForAMOnNodeManager_result)
        return this.equals((assignContainerForAMOnNodeManager_result)that);
      return false;
    }

    public boolean equals(assignContainerForAMOnNodeManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(assignContainerForAMOnNodeManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignContainerForAMOnNodeManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignContainerForAMOnNodeManager_resultStandardSchemeFactory implements SchemeFactory {
      public assignContainerForAMOnNodeManager_resultStandardScheme getScheme() {
        return new assignContainerForAMOnNodeManager_resultStandardScheme();
      }
    }

    private static class assignContainerForAMOnNodeManager_resultStandardScheme extends StandardScheme<assignContainerForAMOnNodeManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignContainerForAMOnNodeManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignContainerForAMOnNodeManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignContainerForAMOnNodeManager_resultTupleSchemeFactory implements SchemeFactory {
      public assignContainerForAMOnNodeManager_resultTupleScheme getScheme() {
        return new assignContainerForAMOnNodeManager_resultTupleScheme();
      }
    }

    private static class assignContainerForAMOnNodeManager_resultTupleScheme extends TupleScheme<assignContainerForAMOnNodeManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignContainerForAMOnNodeManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignContainerForAMOnNodeManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class chooseNodeToGetBlock_args implements org.apache.thrift.TBase<chooseNodeToGetBlock_args, chooseNodeToGetBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<chooseNodeToGetBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("chooseNodeToGetBlock_args");

    private static final org.apache.thrift.protocol.TField NODEIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField BLOCKID_FIELD_DESC = new org.apache.thrift.protocol.TField("blockid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new chooseNodeToGetBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new chooseNodeToGetBlock_argsTupleSchemeFactory());
    }

    public List<String> nodeids; // required
    public String blockid; // required
    public String hostname; // required
    public String src; // required
    public long offset; // required
    public long length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODEIDS((short)1, "nodeids"),
      BLOCKID((short)2, "blockid"),
      HOSTNAME((short)3, "hostname"),
      SRC((short)4, "src"),
      OFFSET((short)5, "offset"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODEIDS
            return NODEIDS;
          case 2: // BLOCKID
            return BLOCKID;
          case 3: // HOSTNAME
            return HOSTNAME;
          case 4: // SRC
            return SRC;
          case 5: // OFFSET
            return OFFSET;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODEIDS, new org.apache.thrift.meta_data.FieldMetaData("nodeids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BLOCKID, new org.apache.thrift.meta_data.FieldMetaData("blockid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(chooseNodeToGetBlock_args.class, metaDataMap);
    }

    public chooseNodeToGetBlock_args() {
    }

    public chooseNodeToGetBlock_args(
            List<String> nodeids,
            String blockid,
            String hostname,
            String src,
            long offset,
            long length)
    {
      this();
      this.nodeids = nodeids;
      this.blockid = blockid;
      this.hostname = hostname;
      this.src = src;
      this.offset = offset;
      setOffsetIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public chooseNodeToGetBlock_args(chooseNodeToGetBlock_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeids()) {
        List<String> __this__nodeids = new ArrayList<String>(other.nodeids);
        this.nodeids = __this__nodeids;
      }
      if (other.isSetBlockid()) {
        this.blockid = other.blockid;
      }
      if (other.isSetHostname()) {
        this.hostname = other.hostname;
      }
      if (other.isSetSrc()) {
        this.src = other.src;
      }
      this.offset = other.offset;
      this.length = other.length;
    }

    public chooseNodeToGetBlock_args deepCopy() {
      return new chooseNodeToGetBlock_args(this);
    }

    @Override
    public void clear() {
      this.nodeids = null;
      this.blockid = null;
      this.hostname = null;
      this.src = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public int getNodeidsSize() {
      return (this.nodeids == null) ? 0 : this.nodeids.size();
    }

    public java.util.Iterator<String> getNodeidsIterator() {
      return (this.nodeids == null) ? null : this.nodeids.iterator();
    }

    public void addToNodeids(String elem) {
      if (this.nodeids == null) {
        this.nodeids = new ArrayList<String>();
      }
      this.nodeids.add(elem);
    }

    public List<String> getNodeids() {
      return this.nodeids;
    }

    public chooseNodeToGetBlock_args setNodeids(List<String> nodeids) {
      this.nodeids = nodeids;
      return this;
    }

    public void unsetNodeids() {
      this.nodeids = null;
    }

    /** Returns true if field nodeids is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeids() {
      return this.nodeids != null;
    }

    public void setNodeidsIsSet(boolean value) {
      if (!value) {
        this.nodeids = null;
      }
    }

    public String getBlockid() {
      return this.blockid;
    }

    public chooseNodeToGetBlock_args setBlockid(String blockid) {
      this.blockid = blockid;
      return this;
    }

    public void unsetBlockid() {
      this.blockid = null;
    }

    /** Returns true if field blockid is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockid() {
      return this.blockid != null;
    }

    public void setBlockidIsSet(boolean value) {
      if (!value) {
        this.blockid = null;
      }
    }

    public String getHostname() {
      return this.hostname;
    }

    public chooseNodeToGetBlock_args setHostname(String hostname) {
      this.hostname = hostname;
      return this;
    }

    public void unsetHostname() {
      this.hostname = null;
    }

    /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
    public boolean isSetHostname() {
      return this.hostname != null;
    }

    public void setHostnameIsSet(boolean value) {
      if (!value) {
        this.hostname = null;
      }
    }

    public String getSrc() {
      return this.src;
    }

    public chooseNodeToGetBlock_args setSrc(String src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public long getOffset() {
      return this.offset;
    }

    public chooseNodeToGetBlock_args setOffset(long offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public long getLength() {
      return this.length;
    }

    public chooseNodeToGetBlock_args setLength(long length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case NODEIDS:
          if (value == null) {
            unsetNodeids();
          } else {
            setNodeids((List<String>)value);
          }
          break;

        case BLOCKID:
          if (value == null) {
            unsetBlockid();
          } else {
            setBlockid((String)value);
          }
          break;

        case HOSTNAME:
          if (value == null) {
            unsetHostname();
          } else {
            setHostname((String)value);
          }
          break;

        case SRC:
          if (value == null) {
            unsetSrc();
          } else {
            setSrc((String)value);
          }
          break;

        case OFFSET:
          if (value == null) {
            unsetOffset();
          } else {
            setOffset((Long)value);
          }
          break;

        case LENGTH:
          if (value == null) {
            unsetLength();
          } else {
            setLength((Long)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case NODEIDS:
          return getNodeids();

        case BLOCKID:
          return getBlockid();

        case HOSTNAME:
          return getHostname();

        case SRC:
          return getSrc();

        case OFFSET:
          return getOffset();

        case LENGTH:
          return getLength();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case NODEIDS:
          return isSetNodeids();
        case BLOCKID:
          return isSetBlockid();
        case HOSTNAME:
          return isSetHostname();
        case SRC:
          return isSetSrc();
        case OFFSET:
          return isSetOffset();
        case LENGTH:
          return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof chooseNodeToGetBlock_args)
        return this.equals((chooseNodeToGetBlock_args)that);
      return false;
    }

    public boolean equals(chooseNodeToGetBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeids = true && this.isSetNodeids();
      boolean that_present_nodeids = true && that.isSetNodeids();
      if (this_present_nodeids || that_present_nodeids) {
        if (!(this_present_nodeids && that_present_nodeids))
          return false;
        if (!this.nodeids.equals(that.nodeids))
          return false;
      }

      boolean this_present_blockid = true && this.isSetBlockid();
      boolean that_present_blockid = true && that.isSetBlockid();
      if (this_present_blockid || that_present_blockid) {
        if (!(this_present_blockid && that_present_blockid))
          return false;
        if (!this.blockid.equals(that.blockid))
          return false;
      }

      boolean this_present_hostname = true && this.isSetHostname();
      boolean that_present_hostname = true && that.isSetHostname();
      if (this_present_hostname || that_present_hostname) {
        if (!(this_present_hostname && that_present_hostname))
          return false;
        if (!this.hostname.equals(that.hostname))
          return false;
      }

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeids = true && (isSetNodeids());
      list.add(present_nodeids);
      if (present_nodeids)
        list.add(nodeids);

      boolean present_blockid = true && (isSetBlockid());
      list.add(present_blockid);
      if (present_blockid)
        list.add(blockid);

      boolean present_hostname = true && (isSetHostname());
      list.add(present_hostname);
      if (present_hostname)
        list.add(hostname);

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_offset = true;
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_length = true;
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(chooseNodeToGetBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeids()).compareTo(other.isSetNodeids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeids, other.nodeids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockid()).compareTo(other.isSetBlockid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockid, other.blockid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("chooseNodeToGetBlock_args(");
      boolean first = true;

      sb.append("nodeids:");
      if (this.nodeids == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockid:");
      if (this.blockid == null) {
        sb.append("null");
      } else {
        sb.append(this.blockid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostname:");
      if (this.hostname == null) {
        sb.append("null");
      } else {
        sb.append(this.hostname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class chooseNodeToGetBlock_argsStandardSchemeFactory implements SchemeFactory {
      public chooseNodeToGetBlock_argsStandardScheme getScheme() {
        return new chooseNodeToGetBlock_argsStandardScheme();
      }
    }

    private static class chooseNodeToGetBlock_argsStandardScheme extends StandardScheme<chooseNodeToGetBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, chooseNodeToGetBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // NODEIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.nodeids = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.nodeids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeidsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BLOCKID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blockid = iprot.readString();
                struct.setBlockidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostname = iprot.readString();
                struct.setHostnameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.src = iprot.readString();
                struct.setSrcIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.offset = iprot.readI64();
                struct.setOffsetIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.length = iprot.readI64();
                struct.setLengthIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, chooseNodeToGetBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeids != null) {
          oprot.writeFieldBegin(NODEIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nodeids.size()));
            for (String _iter3 : struct.nodeids)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.blockid != null) {
          oprot.writeFieldBegin(BLOCKID_FIELD_DESC);
          oprot.writeString(struct.blockid);
          oprot.writeFieldEnd();
        }
        if (struct.hostname != null) {
          oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.hostname);
          oprot.writeFieldEnd();
        }
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          oprot.writeString(struct.src);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class chooseNodeToGetBlock_argsTupleSchemeFactory implements SchemeFactory {
      public chooseNodeToGetBlock_argsTupleScheme getScheme() {
        return new chooseNodeToGetBlock_argsTupleScheme();
      }
    }

    private static class chooseNodeToGetBlock_argsTupleScheme extends TupleScheme<chooseNodeToGetBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, chooseNodeToGetBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeids()) {
          optionals.set(0);
        }
        if (struct.isSetBlockid()) {
          optionals.set(1);
        }
        if (struct.isSetHostname()) {
          optionals.set(2);
        }
        if (struct.isSetSrc()) {
          optionals.set(3);
        }
        if (struct.isSetOffset()) {
          optionals.set(4);
        }
        if (struct.isSetLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetNodeids()) {
          {
            oprot.writeI32(struct.nodeids.size());
            for (String _iter4 : struct.nodeids)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetBlockid()) {
          oprot.writeString(struct.blockid);
        }
        if (struct.isSetHostname()) {
          oprot.writeString(struct.hostname);
        }
        if (struct.isSetSrc()) {
          oprot.writeString(struct.src);
        }
        if (struct.isSetOffset()) {
          oprot.writeI64(struct.offset);
        }
        if (struct.isSetLength()) {
          oprot.writeI64(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, chooseNodeToGetBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.nodeids = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.nodeids.add(_elem6);
            }
          }
          struct.setNodeidsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.blockid = iprot.readString();
          struct.setBlockidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostname = iprot.readString();
          struct.setHostnameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.src = iprot.readString();
          struct.setSrcIsSet(true);
        }
        if (incoming.get(4)) {
          struct.offset = iprot.readI64();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(5)) {
          struct.length = iprot.readI64();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class chooseNodeToGetBlock_result implements org.apache.thrift.TBase<chooseNodeToGetBlock_result, chooseNodeToGetBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<chooseNodeToGetBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("chooseNodeToGetBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new chooseNodeToGetBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new chooseNodeToGetBlock_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(chooseNodeToGetBlock_result.class, metaDataMap);
    }

    public chooseNodeToGetBlock_result() {
    }

    public chooseNodeToGetBlock_result(
            String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public chooseNodeToGetBlock_result(chooseNodeToGetBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public chooseNodeToGetBlock_result deepCopy() {
      return new chooseNodeToGetBlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public chooseNodeToGetBlock_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof chooseNodeToGetBlock_result)
        return this.equals((chooseNodeToGetBlock_result)that);
      return false;
    }

    public boolean equals(chooseNodeToGetBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(chooseNodeToGetBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("chooseNodeToGetBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class chooseNodeToGetBlock_resultStandardSchemeFactory implements SchemeFactory {
      public chooseNodeToGetBlock_resultStandardScheme getScheme() {
        return new chooseNodeToGetBlock_resultStandardScheme();
      }
    }

    private static class chooseNodeToGetBlock_resultStandardScheme extends StandardScheme<chooseNodeToGetBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, chooseNodeToGetBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, chooseNodeToGetBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class chooseNodeToGetBlock_resultTupleSchemeFactory implements SchemeFactory {
      public chooseNodeToGetBlock_resultTupleScheme getScheme() {
        return new chooseNodeToGetBlock_resultTupleScheme();
      }
    }

    private static class chooseNodeToGetBlock_resultTupleScheme extends TupleScheme<chooseNodeToGetBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, chooseNodeToGetBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, chooseNodeToGetBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateNodeInfo_args implements org.apache.thrift.TBase<updateNodeInfo_args, updateNodeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNodeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNodeInfo_args");

    private static final org.apache.thrift.protocol.TField NODEID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANDWITHUSED_FIELD_DESC = new org.apache.thrift.protocol.TField("bandwithused", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNodeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNodeInfo_argsTupleSchemeFactory());
    }

    public String nodeid; // required
    public double bandwithused; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODEID((short)1, "nodeid"),
      BANDWITHUSED((short)2, "bandwithused");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODEID
            return NODEID;
          case 2: // BANDWITHUSED
            return BANDWITHUSED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BANDWITHUSED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODEID, new org.apache.thrift.meta_data.FieldMetaData("nodeid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANDWITHUSED, new org.apache.thrift.meta_data.FieldMetaData("bandwithused", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNodeInfo_args.class, metaDataMap);
    }

    public updateNodeInfo_args() {
    }

    public updateNodeInfo_args(
            String nodeid,
            double bandwithused)
    {
      this();
      this.nodeid = nodeid;
      this.bandwithused = bandwithused;
      setBandwithusedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNodeInfo_args(updateNodeInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeid()) {
        this.nodeid = other.nodeid;
      }
      this.bandwithused = other.bandwithused;
    }

    public updateNodeInfo_args deepCopy() {
      return new updateNodeInfo_args(this);
    }

    @Override
    public void clear() {
      this.nodeid = null;
      setBandwithusedIsSet(false);
      this.bandwithused = 0.0;
    }

    public String getNodeid() {
      return this.nodeid;
    }

    public updateNodeInfo_args setNodeid(String nodeid) {
      this.nodeid = nodeid;
      return this;
    }

    public void unsetNodeid() {
      this.nodeid = null;
    }

    /** Returns true if field nodeid is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeid() {
      return this.nodeid != null;
    }

    public void setNodeidIsSet(boolean value) {
      if (!value) {
        this.nodeid = null;
      }
    }

    public double getBandwithused() {
      return this.bandwithused;
    }

    public updateNodeInfo_args setBandwithused(double bandwithused) {
      this.bandwithused = bandwithused;
      setBandwithusedIsSet(true);
      return this;
    }

    public void unsetBandwithused() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANDWITHUSED_ISSET_ID);
    }

    /** Returns true if field bandwithused is set (has been assigned a value) and false otherwise */
    public boolean isSetBandwithused() {
      return EncodingUtils.testBit(__isset_bitfield, __BANDWITHUSED_ISSET_ID);
    }

    public void setBandwithusedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANDWITHUSED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case NODEID:
          if (value == null) {
            unsetNodeid();
          } else {
            setNodeid((String)value);
          }
          break;

        case BANDWITHUSED:
          if (value == null) {
            unsetBandwithused();
          } else {
            setBandwithused((Double)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case NODEID:
          return getNodeid();

        case BANDWITHUSED:
          return getBandwithused();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case NODEID:
          return isSetNodeid();
        case BANDWITHUSED:
          return isSetBandwithused();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNodeInfo_args)
        return this.equals((updateNodeInfo_args)that);
      return false;
    }

    public boolean equals(updateNodeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeid = true && this.isSetNodeid();
      boolean that_present_nodeid = true && that.isSetNodeid();
      if (this_present_nodeid || that_present_nodeid) {
        if (!(this_present_nodeid && that_present_nodeid))
          return false;
        if (!this.nodeid.equals(that.nodeid))
          return false;
      }

      boolean this_present_bandwithused = true;
      boolean that_present_bandwithused = true;
      if (this_present_bandwithused || that_present_bandwithused) {
        if (!(this_present_bandwithused && that_present_bandwithused))
          return false;
        if (this.bandwithused != that.bandwithused)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nodeid = true && (isSetNodeid());
      list.add(present_nodeid);
      if (present_nodeid)
        list.add(nodeid);

      boolean present_bandwithused = true;
      list.add(present_bandwithused);
      if (present_bandwithused)
        list.add(bandwithused);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNodeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeid()).compareTo(other.isSetNodeid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeid, other.nodeid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBandwithused()).compareTo(other.isSetBandwithused());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBandwithused()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bandwithused, other.bandwithused);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNodeInfo_args(");
      boolean first = true;

      sb.append("nodeid:");
      if (this.nodeid == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bandwithused:");
      sb.append(this.bandwithused);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNodeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateNodeInfo_argsStandardScheme getScheme() {
        return new updateNodeInfo_argsStandardScheme();
      }
    }

    private static class updateNodeInfo_argsStandardScheme extends StandardScheme<updateNodeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // NODEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeid = iprot.readString();
                struct.setNodeidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANDWITHUSED
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.bandwithused = iprot.readDouble();
                struct.setBandwithusedIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNodeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeid != null) {
          oprot.writeFieldBegin(NODEID_FIELD_DESC);
          oprot.writeString(struct.nodeid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BANDWITHUSED_FIELD_DESC);
        oprot.writeDouble(struct.bandwithused);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNodeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateNodeInfo_argsTupleScheme getScheme() {
        return new updateNodeInfo_argsTupleScheme();
      }
    }

    private static class updateNodeInfo_argsTupleScheme extends TupleScheme<updateNodeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeid()) {
          optionals.set(0);
        }
        if (struct.isSetBandwithused()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeid()) {
          oprot.writeString(struct.nodeid);
        }
        if (struct.isSetBandwithused()) {
          oprot.writeDouble(struct.bandwithused);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeid = iprot.readString();
          struct.setNodeidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bandwithused = iprot.readDouble();
          struct.setBandwithusedIsSet(true);
        }
      }
    }

  }

  public static class updateNodeInfo_result implements org.apache.thrift.TBase<updateNodeInfo_result, updateNodeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNodeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNodeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNodeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNodeInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNodeInfo_result.class, metaDataMap);
    }

    public updateNodeInfo_result() {
    }

    public updateNodeInfo_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNodeInfo_result(updateNodeInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateNodeInfo_result deepCopy() {
      return new updateNodeInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateNodeInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNodeInfo_result)
        return this.equals((updateNodeInfo_result)that);
      return false;
    }

    public boolean equals(updateNodeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateNodeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNodeInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNodeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateNodeInfo_resultStandardScheme getScheme() {
        return new updateNodeInfo_resultStandardScheme();
      }
    }

    private static class updateNodeInfo_resultStandardScheme extends StandardScheme<updateNodeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNodeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNodeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateNodeInfo_resultTupleScheme getScheme() {
        return new updateNodeInfo_resultTupleScheme();
      }
    }

    private static class updateNodeInfo_resultTupleScheme extends TupleScheme<updateNodeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTaskInfo_args implements org.apache.thrift.TBase<updateTaskInfo_args, updateTaskInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskInfo_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASKINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("taskinfo", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField TOTAL_CONTAINERS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalContainers", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CORE_FIELD_DESC = new org.apache.thrift.protocol.TField("core", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskInfo_argsTupleSchemeFactory());
    }

    public String appid; // required
    public Map<String,List<String>> taskinfo; // required
    public int totalContainers; // required
    public int core; // required
    public int memory; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      TASKINFO((short)2, "taskinfo"),
      TOTAL_CONTAINERS((short)3, "totalContainers"),
      CORE((short)4, "core"),
      MEMORY((short)5, "memory");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // TASKINFO
            return TASKINFO;
          case 3: // TOTAL_CONTAINERS
            return TOTAL_CONTAINERS;
          case 4: // CORE
            return CORE;
          case 5: // MEMORY
            return MEMORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALCONTAINERS_ISSET_ID = 0;
    private static final int __CORE_ISSET_ID = 1;
    private static final int __MEMORY_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASKINFO, new org.apache.thrift.meta_data.FieldMetaData("taskinfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.TOTAL_CONTAINERS, new org.apache.thrift.meta_data.FieldMetaData("totalContainers", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CORE, new org.apache.thrift.meta_data.FieldMetaData("core", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskInfo_args.class, metaDataMap);
    }

    public updateTaskInfo_args() {
    }

    public updateTaskInfo_args(
            String appid,
            Map<String,List<String>> taskinfo,
            int totalContainers,
            int core,
            int memory)
    {
      this();
      this.appid = appid;
      this.taskinfo = taskinfo;
      this.totalContainers = totalContainers;
      setTotalContainersIsSet(true);
      this.core = core;
      setCoreIsSet(true);
      this.memory = memory;
      setMemoryIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskInfo_args(updateTaskInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetTaskinfo()) {
        Map<String,List<String>> __this__taskinfo = new HashMap<String,List<String>>(other.taskinfo.size());
        for (Map.Entry<String, List<String>> other_element : other.taskinfo.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__taskinfo_copy_key = other_element_key;

          List<String> __this__taskinfo_copy_value = new ArrayList<String>(other_element_value);

          __this__taskinfo.put(__this__taskinfo_copy_key, __this__taskinfo_copy_value);
        }
        this.taskinfo = __this__taskinfo;
      }
      this.totalContainers = other.totalContainers;
      this.core = other.core;
      this.memory = other.memory;
    }

    public updateTaskInfo_args deepCopy() {
      return new updateTaskInfo_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.taskinfo = null;
      setTotalContainersIsSet(false);
      this.totalContainers = 0;
      setCoreIsSet(false);
      this.core = 0;
      setMemoryIsSet(false);
      this.memory = 0;
    }

    public String getAppid() {
      return this.appid;
    }

    public updateTaskInfo_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public int getTaskinfoSize() {
      return (this.taskinfo == null) ? 0 : this.taskinfo.size();
    }

    public void putToTaskinfo(String key, List<String> val) {
      if (this.taskinfo == null) {
        this.taskinfo = new HashMap<String,List<String>>();
      }
      this.taskinfo.put(key, val);
    }

    public Map<String,List<String>> getTaskinfo() {
      return this.taskinfo;
    }

    public updateTaskInfo_args setTaskinfo(Map<String,List<String>> taskinfo) {
      this.taskinfo = taskinfo;
      return this;
    }

    public void unsetTaskinfo() {
      this.taskinfo = null;
    }

    /** Returns true if field taskinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskinfo() {
      return this.taskinfo != null;
    }

    public void setTaskinfoIsSet(boolean value) {
      if (!value) {
        this.taskinfo = null;
      }
    }

    public int getTotalContainers() {
      return this.totalContainers;
    }

    public updateTaskInfo_args setTotalContainers(int totalContainers) {
      this.totalContainers = totalContainers;
      setTotalContainersIsSet(true);
      return this;
    }

    public void unsetTotalContainers() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCONTAINERS_ISSET_ID);
    }

    /** Returns true if field totalContainers is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalContainers() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALCONTAINERS_ISSET_ID);
    }

    public void setTotalContainersIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCONTAINERS_ISSET_ID, value);
    }

    public int getCore() {
      return this.core;
    }

    public updateTaskInfo_args setCore(int core) {
      this.core = core;
      setCoreIsSet(true);
      return this;
    }

    public void unsetCore() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORE_ISSET_ID);
    }

    /** Returns true if field core is set (has been assigned a value) and false otherwise */
    public boolean isSetCore() {
      return EncodingUtils.testBit(__isset_bitfield, __CORE_ISSET_ID);
    }

    public void setCoreIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORE_ISSET_ID, value);
    }

    public int getMemory() {
      return this.memory;
    }

    public updateTaskInfo_args setMemory(int memory) {
      this.memory = memory;
      setMemoryIsSet(true);
      return this;
    }

    public void unsetMemory() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ISSET_ID);
    }

    /** Returns true if field memory is set (has been assigned a value) and false otherwise */
    public boolean isSetMemory() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMORY_ISSET_ID);
    }

    public void setMemoryIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

        case TASKINFO:
          if (value == null) {
            unsetTaskinfo();
          } else {
            setTaskinfo((Map<String,List<String>>)value);
          }
          break;

        case TOTAL_CONTAINERS:
          if (value == null) {
            unsetTotalContainers();
          } else {
            setTotalContainers((Integer)value);
          }
          break;

        case CORE:
          if (value == null) {
            unsetCore();
          } else {
            setCore((Integer)value);
          }
          break;

        case MEMORY:
          if (value == null) {
            unsetMemory();
          } else {
            setMemory((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case APPID:
          return getAppid();

        case TASKINFO:
          return getTaskinfo();

        case TOTAL_CONTAINERS:
          return getTotalContainers();

        case CORE:
          return getCore();

        case MEMORY:
          return getMemory();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case APPID:
          return isSetAppid();
        case TASKINFO:
          return isSetTaskinfo();
        case TOTAL_CONTAINERS:
          return isSetTotalContainers();
        case CORE:
          return isSetCore();
        case MEMORY:
          return isSetMemory();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskInfo_args)
        return this.equals((updateTaskInfo_args)that);
      return false;
    }

    public boolean equals(updateTaskInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_taskinfo = true && this.isSetTaskinfo();
      boolean that_present_taskinfo = true && that.isSetTaskinfo();
      if (this_present_taskinfo || that_present_taskinfo) {
        if (!(this_present_taskinfo && that_present_taskinfo))
          return false;
        if (!this.taskinfo.equals(that.taskinfo))
          return false;
      }

      boolean this_present_totalContainers = true;
      boolean that_present_totalContainers = true;
      if (this_present_totalContainers || that_present_totalContainers) {
        if (!(this_present_totalContainers && that_present_totalContainers))
          return false;
        if (this.totalContainers != that.totalContainers)
          return false;
      }

      boolean this_present_core = true;
      boolean that_present_core = true;
      if (this_present_core || that_present_core) {
        if (!(this_present_core && that_present_core))
          return false;
        if (this.core != that.core)
          return false;
      }

      boolean this_present_memory = true;
      boolean that_present_memory = true;
      if (this_present_memory || that_present_memory) {
        if (!(this_present_memory && that_present_memory))
          return false;
        if (this.memory != that.memory)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_taskinfo = true && (isSetTaskinfo());
      list.add(present_taskinfo);
      if (present_taskinfo)
        list.add(taskinfo);

      boolean present_totalContainers = true;
      list.add(present_totalContainers);
      if (present_totalContainers)
        list.add(totalContainers);

      boolean present_core = true;
      list.add(present_core);
      if (present_core)
        list.add(core);

      boolean present_memory = true;
      list.add(present_memory);
      if (present_memory)
        list.add(memory);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskinfo()).compareTo(other.isSetTaskinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskinfo, other.taskinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTotalContainers()).compareTo(other.isSetTotalContainers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalContainers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalContainers, other.totalContainers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCore()).compareTo(other.isSetCore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.core, other.core);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskInfo_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskinfo:");
      if (this.taskinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.taskinfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalContainers:");
      sb.append(this.totalContainers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("core:");
      sb.append(this.core);
      first = false;
      if (!first) sb.append(", ");
      sb.append("memory:");
      sb.append(this.memory);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskInfo_argsStandardScheme getScheme() {
        return new updateTaskInfo_argsStandardScheme();
      }
    }

    private static class updateTaskInfo_argsStandardScheme extends StandardScheme<updateTaskInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASKINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.taskinfo = new HashMap<String,List<String>>(2*_map8.size);
                  String _key9;
                  List<String> _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                      _val10 = new ArrayList<String>(_list12.size);
                      String _elem13;
                      for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                      {
                        _elem13 = iprot.readString();
                        _val10.add(_elem13);
                      }
                      iprot.readListEnd();
                    }
                    struct.taskinfo.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setTaskinfoIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOTAL_CONTAINERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalContainers = iprot.readI32();
                struct.setTotalContainersIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CORE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.core = iprot.readI32();
                struct.setCoreIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MEMORY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.memory = iprot.readI32();
                struct.setMemoryIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.taskinfo != null) {
          oprot.writeFieldBegin(TASKINFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.taskinfo.size()));
            for (Map.Entry<String, List<String>> _iter15 : struct.taskinfo.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter15.getValue().size()));
                for (String _iter16 : _iter15.getValue())
                {
                  oprot.writeString(_iter16);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_CONTAINERS_FIELD_DESC);
        oprot.writeI32(struct.totalContainers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CORE_FIELD_DESC);
        oprot.writeI32(struct.core);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MEMORY_FIELD_DESC);
        oprot.writeI32(struct.memory);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskInfo_argsTupleScheme getScheme() {
        return new updateTaskInfo_argsTupleScheme();
      }
    }

    private static class updateTaskInfo_argsTupleScheme extends TupleScheme<updateTaskInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetTaskinfo()) {
          optionals.set(1);
        }
        if (struct.isSetTotalContainers()) {
          optionals.set(2);
        }
        if (struct.isSetCore()) {
          optionals.set(3);
        }
        if (struct.isSetMemory()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetTaskinfo()) {
          {
            oprot.writeI32(struct.taskinfo.size());
            for (Map.Entry<String, List<String>> _iter17 : struct.taskinfo.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              {
                oprot.writeI32(_iter17.getValue().size());
                for (String _iter18 : _iter17.getValue())
                {
                  oprot.writeString(_iter18);
                }
              }
            }
          }
        }
        if (struct.isSetTotalContainers()) {
          oprot.writeI32(struct.totalContainers);
        }
        if (struct.isSetCore()) {
          oprot.writeI32(struct.core);
        }
        if (struct.isSetMemory()) {
          oprot.writeI32(struct.memory);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.taskinfo = new HashMap<String,List<String>>(2*_map19.size);
            String _key20;
            List<String> _val21;
            for (int _i22 = 0; _i22 < _map19.size; ++_i22)
            {
              _key20 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val21 = new ArrayList<String>(_list23.size);
                String _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readString();
                  _val21.add(_elem24);
                }
              }
              struct.taskinfo.put(_key20, _val21);
            }
          }
          struct.setTaskinfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.totalContainers = iprot.readI32();
          struct.setTotalContainersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.core = iprot.readI32();
          struct.setCoreIsSet(true);
        }
        if (incoming.get(4)) {
          struct.memory = iprot.readI32();
          struct.setMemoryIsSet(true);
        }
      }
    }

  }

  public static class updateTaskInfo_result implements org.apache.thrift.TBase<updateTaskInfo_result, updateTaskInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskInfo_result.class, metaDataMap);
    }

    public updateTaskInfo_result() {
    }

    public updateTaskInfo_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskInfo_result(updateTaskInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTaskInfo_result deepCopy() {
      return new updateTaskInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateTaskInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskInfo_result)
        return this.equals((updateTaskInfo_result)that);
      return false;
    }

    public boolean equals(updateTaskInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskInfo_resultStandardScheme getScheme() {
        return new updateTaskInfo_resultStandardScheme();
      }
    }

    private static class updateTaskInfo_resultStandardScheme extends StandardScheme<updateTaskInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskInfo_resultTupleScheme getScheme() {
        return new updateTaskInfo_resultTupleScheme();
      }
    }

    private static class updateTaskInfo_resultTupleScheme extends TupleScheme<updateTaskInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTaskAllocatedInfo_args implements org.apache.thrift.TBase<getTaskAllocatedInfo_args, getTaskAllocatedInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskAllocatedInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskAllocatedInfo_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASKIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskAllocatedInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskAllocatedInfo_argsTupleSchemeFactory());
    }

    public String appid; // required
    public List<String> taskids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      TASKIDS((short)2, "taskids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // TASKIDS
            return TASKIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASKIDS, new org.apache.thrift.meta_data.FieldMetaData("taskids", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskAllocatedInfo_args.class, metaDataMap);
    }

    public getTaskAllocatedInfo_args() {
    }

    public getTaskAllocatedInfo_args(
            String appid,
            List<String> taskids)
    {
      this();
      this.appid = appid;
      this.taskids = taskids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskAllocatedInfo_args(getTaskAllocatedInfo_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetTaskids()) {
        List<String> __this__taskids = new ArrayList<String>(other.taskids);
        this.taskids = __this__taskids;
      }
    }

    public getTaskAllocatedInfo_args deepCopy() {
      return new getTaskAllocatedInfo_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.taskids = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public getTaskAllocatedInfo_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public int getTaskidsSize() {
      return (this.taskids == null) ? 0 : this.taskids.size();
    }

    public java.util.Iterator<String> getTaskidsIterator() {
      return (this.taskids == null) ? null : this.taskids.iterator();
    }

    public void addToTaskids(String elem) {
      if (this.taskids == null) {
        this.taskids = new ArrayList<String>();
      }
      this.taskids.add(elem);
    }

    public List<String> getTaskids() {
      return this.taskids;
    }

    public getTaskAllocatedInfo_args setTaskids(List<String> taskids) {
      this.taskids = taskids;
      return this;
    }

    public void unsetTaskids() {
      this.taskids = null;
    }

    /** Returns true if field taskids is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskids() {
      return this.taskids != null;
    }

    public void setTaskidsIsSet(boolean value) {
      if (!value) {
        this.taskids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

        case TASKIDS:
          if (value == null) {
            unsetTaskids();
          } else {
            setTaskids((List<String>)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case APPID:
          return getAppid();

        case TASKIDS:
          return getTaskids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case APPID:
          return isSetAppid();
        case TASKIDS:
          return isSetTaskids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskAllocatedInfo_args)
        return this.equals((getTaskAllocatedInfo_args)that);
      return false;
    }

    public boolean equals(getTaskAllocatedInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_taskids = true && this.isSetTaskids();
      boolean that_present_taskids = true && that.isSetTaskids();
      if (this_present_taskids || that_present_taskids) {
        if (!(this_present_taskids && that_present_taskids))
          return false;
        if (!this.taskids.equals(that.taskids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_taskids = true && (isSetTaskids());
      list.add(present_taskids);
      if (present_taskids)
        list.add(taskids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskAllocatedInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskids()).compareTo(other.isSetTaskids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskids, other.taskids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskAllocatedInfo_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskids:");
      if (this.taskids == null) {
        sb.append("null");
      } else {
        sb.append(this.taskids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskAllocatedInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getTaskAllocatedInfo_argsStandardScheme getScheme() {
        return new getTaskAllocatedInfo_argsStandardScheme();
      }
    }

    private static class getTaskAllocatedInfo_argsStandardScheme extends StandardScheme<getTaskAllocatedInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskAllocatedInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASKIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.taskids = new ArrayList<String>(_list26.size);
                  String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.taskids.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskidsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskAllocatedInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.taskids != null) {
          oprot.writeFieldBegin(TASKIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taskids.size()));
            for (String _iter29 : struct.taskids)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskAllocatedInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getTaskAllocatedInfo_argsTupleScheme getScheme() {
        return new getTaskAllocatedInfo_argsTupleScheme();
      }
    }

    private static class getTaskAllocatedInfo_argsTupleScheme extends TupleScheme<getTaskAllocatedInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskAllocatedInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetTaskids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetTaskids()) {
          {
            oprot.writeI32(struct.taskids.size());
            for (String _iter30 : struct.taskids)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskAllocatedInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.taskids = new ArrayList<String>(_list31.size);
            String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.taskids.add(_elem32);
            }
          }
          struct.setTaskidsIsSet(true);
        }
      }
    }

  }

  public static class getTaskAllocatedInfo_result implements org.apache.thrift.TBase<getTaskAllocatedInfo_result, getTaskAllocatedInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskAllocatedInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskAllocatedInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTaskAllocatedInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTaskAllocatedInfo_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskAllocatedInfo_result.class, metaDataMap);
    }

    public getTaskAllocatedInfo_result() {
    }

    public getTaskAllocatedInfo_result(
            Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskAllocatedInfo_result(getTaskAllocatedInfo_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public getTaskAllocatedInfo_result deepCopy() {
      return new getTaskAllocatedInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public getTaskAllocatedInfo_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Map<String,String>)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskAllocatedInfo_result)
        return this.equals((getTaskAllocatedInfo_result)that);
      return false;
    }

    public boolean equals(getTaskAllocatedInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTaskAllocatedInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTaskAllocatedInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskAllocatedInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getTaskAllocatedInfo_resultStandardScheme getScheme() {
        return new getTaskAllocatedInfo_resultStandardScheme();
      }
    }

    private static class getTaskAllocatedInfo_resultStandardScheme extends StandardScheme<getTaskAllocatedInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskAllocatedInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map34.size);
                  String _key35;
                  String _val36;
                  for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                  {
                    _key35 = iprot.readString();
                    _val36 = iprot.readString();
                    struct.success.put(_key35, _val36);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskAllocatedInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter38 : struct.success.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              oprot.writeString(_iter38.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskAllocatedInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getTaskAllocatedInfo_resultTupleScheme getScheme() {
        return new getTaskAllocatedInfo_resultTupleScheme();
      }
    }

    private static class getTaskAllocatedInfo_resultTupleScheme extends TupleScheme<getTaskAllocatedInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskAllocatedInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter39 : struct.success.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              oprot.writeString(_iter39.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskAllocatedInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map40.size);
            String _key41;
            String _val42;
            for (int _i43 = 0; _i43 < _map40.size; ++_i43)
            {
              _key41 = iprot.readString();
              _val42 = iprot.readString();
              struct.success.put(_key41, _val42);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateTaskBlockMap_args implements org.apache.thrift.TBase<updateTaskBlockMap_args, updateTaskBlockMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskBlockMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskBlockMap_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASKBLOCKMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("taskblockmap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskBlockMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskBlockMap_argsTupleSchemeFactory());
    }

    public String appid; // required
    public Map<String,String> taskblockmap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      TASKBLOCKMAP((short)2, "taskblockmap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // TASKBLOCKMAP
            return TASKBLOCKMAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASKBLOCKMAP, new org.apache.thrift.meta_data.FieldMetaData("taskblockmap", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskBlockMap_args.class, metaDataMap);
    }

    public updateTaskBlockMap_args() {
    }

    public updateTaskBlockMap_args(
            String appid,
            Map<String,String> taskblockmap)
    {
      this();
      this.appid = appid;
      this.taskblockmap = taskblockmap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskBlockMap_args(updateTaskBlockMap_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetTaskblockmap()) {
        Map<String,String> __this__taskblockmap = new HashMap<String,String>(other.taskblockmap);
        this.taskblockmap = __this__taskblockmap;
      }
    }

    public updateTaskBlockMap_args deepCopy() {
      return new updateTaskBlockMap_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.taskblockmap = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public updateTaskBlockMap_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public int getTaskblockmapSize() {
      return (this.taskblockmap == null) ? 0 : this.taskblockmap.size();
    }

    public void putToTaskblockmap(String key, String val) {
      if (this.taskblockmap == null) {
        this.taskblockmap = new HashMap<String,String>();
      }
      this.taskblockmap.put(key, val);
    }

    public Map<String,String> getTaskblockmap() {
      return this.taskblockmap;
    }

    public updateTaskBlockMap_args setTaskblockmap(Map<String,String> taskblockmap) {
      this.taskblockmap = taskblockmap;
      return this;
    }

    public void unsetTaskblockmap() {
      this.taskblockmap = null;
    }

    /** Returns true if field taskblockmap is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskblockmap() {
      return this.taskblockmap != null;
    }

    public void setTaskblockmapIsSet(boolean value) {
      if (!value) {
        this.taskblockmap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

        case TASKBLOCKMAP:
          if (value == null) {
            unsetTaskblockmap();
          } else {
            setTaskblockmap((Map<String,String>)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case APPID:
          return getAppid();

        case TASKBLOCKMAP:
          return getTaskblockmap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case APPID:
          return isSetAppid();
        case TASKBLOCKMAP:
          return isSetTaskblockmap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskBlockMap_args)
        return this.equals((updateTaskBlockMap_args)that);
      return false;
    }

    public boolean equals(updateTaskBlockMap_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_taskblockmap = true && this.isSetTaskblockmap();
      boolean that_present_taskblockmap = true && that.isSetTaskblockmap();
      if (this_present_taskblockmap || that_present_taskblockmap) {
        if (!(this_present_taskblockmap && that_present_taskblockmap))
          return false;
        if (!this.taskblockmap.equals(that.taskblockmap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_taskblockmap = true && (isSetTaskblockmap());
      list.add(present_taskblockmap);
      if (present_taskblockmap)
        list.add(taskblockmap);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskBlockMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskblockmap()).compareTo(other.isSetTaskblockmap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskblockmap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskblockmap, other.taskblockmap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskBlockMap_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskblockmap:");
      if (this.taskblockmap == null) {
        sb.append("null");
      } else {
        sb.append(this.taskblockmap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskBlockMap_argsStandardSchemeFactory implements SchemeFactory {
      public updateTaskBlockMap_argsStandardScheme getScheme() {
        return new updateTaskBlockMap_argsStandardScheme();
      }
    }

    private static class updateTaskBlockMap_argsStandardScheme extends StandardScheme<updateTaskBlockMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskBlockMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASKBLOCKMAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                  struct.taskblockmap = new HashMap<String,String>(2*_map44.size);
                  String _key45;
                  String _val46;
                  for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                  {
                    _key45 = iprot.readString();
                    _val46 = iprot.readString();
                    struct.taskblockmap.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                struct.setTaskblockmapIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskBlockMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.taskblockmap != null) {
          oprot.writeFieldBegin(TASKBLOCKMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.taskblockmap.size()));
            for (Map.Entry<String, String> _iter48 : struct.taskblockmap.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskBlockMap_argsTupleSchemeFactory implements SchemeFactory {
      public updateTaskBlockMap_argsTupleScheme getScheme() {
        return new updateTaskBlockMap_argsTupleScheme();
      }
    }

    private static class updateTaskBlockMap_argsTupleScheme extends TupleScheme<updateTaskBlockMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskBlockMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetTaskblockmap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetTaskblockmap()) {
          {
            oprot.writeI32(struct.taskblockmap.size());
            for (Map.Entry<String, String> _iter49 : struct.taskblockmap.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskBlockMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.taskblockmap = new HashMap<String,String>(2*_map50.size);
            String _key51;
            String _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              _key51 = iprot.readString();
              _val52 = iprot.readString();
              struct.taskblockmap.put(_key51, _val52);
            }
          }
          struct.setTaskblockmapIsSet(true);
        }
      }
    }

  }

  public static class updateTaskBlockMap_result implements org.apache.thrift.TBase<updateTaskBlockMap_result, updateTaskBlockMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTaskBlockMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTaskBlockMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTaskBlockMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTaskBlockMap_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTaskBlockMap_result.class, metaDataMap);
    }

    public updateTaskBlockMap_result() {
    }

    public updateTaskBlockMap_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTaskBlockMap_result(updateTaskBlockMap_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateTaskBlockMap_result deepCopy() {
      return new updateTaskBlockMap_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateTaskBlockMap_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTaskBlockMap_result)
        return this.equals((updateTaskBlockMap_result)that);
      return false;
    }

    public boolean equals(updateTaskBlockMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTaskBlockMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTaskBlockMap_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTaskBlockMap_resultStandardSchemeFactory implements SchemeFactory {
      public updateTaskBlockMap_resultStandardScheme getScheme() {
        return new updateTaskBlockMap_resultStandardScheme();
      }
    }

    private static class updateTaskBlockMap_resultStandardScheme extends StandardScheme<updateTaskBlockMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTaskBlockMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTaskBlockMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTaskBlockMap_resultTupleSchemeFactory implements SchemeFactory {
      public updateTaskBlockMap_resultTupleScheme getScheme() {
        return new updateTaskBlockMap_resultTupleScheme();
      }
    }

    private static class updateTaskBlockMap_resultTupleScheme extends TupleScheme<updateTaskBlockMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTaskBlockMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTaskBlockMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class justLog_args implements org.apache.thrift.TBase<justLog_args, justLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<justLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("justLog_args");

    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new justLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new justLog_argsTupleSchemeFactory());
    }

    public String log; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG((short)1, "log");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG
            return LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(justLog_args.class, metaDataMap);
    }

    public justLog_args() {
    }

    public justLog_args(
            String log)
    {
      this();
      this.log = log;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public justLog_args(justLog_args other) {
      if (other.isSetLog()) {
        this.log = other.log;
      }
    }

    public justLog_args deepCopy() {
      return new justLog_args(this);
    }

    @Override
    public void clear() {
      this.log = null;
    }

    public String getLog() {
      return this.log;
    }

    public justLog_args setLog(String log) {
      this.log = log;
      return this;
    }

    public void unsetLog() {
      this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
      return this.log != null;
    }

    public void setLogIsSet(boolean value) {
      if (!value) {
        this.log = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case LOG:
          if (value == null) {
            unsetLog();
          } else {
            setLog((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case LOG:
          return getLog();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case LOG:
          return isSetLog();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof justLog_args)
        return this.equals((justLog_args)that);
      return false;
    }

    public boolean equals(justLog_args that) {
      if (that == null)
        return false;

      boolean this_present_log = true && this.isSetLog();
      boolean that_present_log = true && that.isSetLog();
      if (this_present_log || that_present_log) {
        if (!(this_present_log && that_present_log))
          return false;
        if (!this.log.equals(that.log))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_log = true && (isSetLog());
      list.add(present_log);
      if (present_log)
        list.add(log);

      return list.hashCode();
    }

    @Override
    public int compareTo(justLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("justLog_args(");
      boolean first = true;

      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class justLog_argsStandardSchemeFactory implements SchemeFactory {
      public justLog_argsStandardScheme getScheme() {
        return new justLog_argsStandardScheme();
      }
    }

    private static class justLog_argsStandardScheme extends StandardScheme<justLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, justLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.log = iprot.readString();
                struct.setLogIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, justLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.log != null) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          oprot.writeString(struct.log);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class justLog_argsTupleSchemeFactory implements SchemeFactory {
      public justLog_argsTupleScheme getScheme() {
        return new justLog_argsTupleScheme();
      }
    }

    private static class justLog_argsTupleScheme extends TupleScheme<justLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, justLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLog()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLog()) {
          oprot.writeString(struct.log);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, justLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.log = iprot.readString();
          struct.setLogIsSet(true);
        }
      }
    }

  }

  public static class justLog_result implements org.apache.thrift.TBase<justLog_result, justLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<justLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("justLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new justLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new justLog_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(justLog_result.class, metaDataMap);
    }

    public justLog_result() {
    }

    public justLog_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public justLog_result(justLog_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public justLog_result deepCopy() {
      return new justLog_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public justLog_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof justLog_result)
        return this.equals((justLog_result)that);
      return false;
    }

    public boolean equals(justLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(justLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("justLog_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class justLog_resultStandardSchemeFactory implements SchemeFactory {
      public justLog_resultStandardScheme getScheme() {
        return new justLog_resultStandardScheme();
      }
    }

    private static class justLog_resultStandardScheme extends StandardScheme<justLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, justLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, justLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class justLog_resultTupleSchemeFactory implements SchemeFactory {
      public justLog_resultTupleScheme getScheme() {
        return new justLog_resultTupleScheme();
      }
    }

    private static class justLog_resultTupleScheme extends TupleScheme<justLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, justLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, justLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class blockLoadCompleted_args implements org.apache.thrift.TBase<blockLoadCompleted_args, blockLoadCompleted_args._Fields>, java.io.Serializable, Cloneable, Comparable<blockLoadCompleted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blockLoadCompleted_args");

    private static final org.apache.thrift.protocol.TField BLOKID_FIELD_DESC = new org.apache.thrift.protocol.TField("blokid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODEID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BACKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("backup", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new blockLoadCompleted_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new blockLoadCompleted_argsTupleSchemeFactory());
    }

    public String blokid; // required
    public String nodeid; // required
    public String backup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BLOKID((short)1, "blokid"),
      NODEID((short)2, "nodeid"),
      BACKUP((short)3, "backup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BLOKID
            return BLOKID;
          case 2: // NODEID
            return NODEID;
          case 3: // BACKUP
            return BACKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BLOKID, new org.apache.thrift.meta_data.FieldMetaData("blokid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODEID, new org.apache.thrift.meta_data.FieldMetaData("nodeid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BACKUP, new org.apache.thrift.meta_data.FieldMetaData("backup", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blockLoadCompleted_args.class, metaDataMap);
    }

    public blockLoadCompleted_args() {
    }

    public blockLoadCompleted_args(
            String blokid,
            String nodeid,
            String backup)
    {
      this();
      this.blokid = blokid;
      this.nodeid = nodeid;
      this.backup = backup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockLoadCompleted_args(blockLoadCompleted_args other) {
      if (other.isSetBlokid()) {
        this.blokid = other.blokid;
      }
      if (other.isSetNodeid()) {
        this.nodeid = other.nodeid;
      }
      if (other.isSetBackup()) {
        this.backup = other.backup;
      }
    }

    public blockLoadCompleted_args deepCopy() {
      return new blockLoadCompleted_args(this);
    }

    @Override
    public void clear() {
      this.blokid = null;
      this.nodeid = null;
      this.backup = null;
    }

    public String getBlokid() {
      return this.blokid;
    }

    public blockLoadCompleted_args setBlokid(String blokid) {
      this.blokid = blokid;
      return this;
    }

    public void unsetBlokid() {
      this.blokid = null;
    }

    /** Returns true if field blokid is set (has been assigned a value) and false otherwise */
    public boolean isSetBlokid() {
      return this.blokid != null;
    }

    public void setBlokidIsSet(boolean value) {
      if (!value) {
        this.blokid = null;
      }
    }

    public String getNodeid() {
      return this.nodeid;
    }

    public blockLoadCompleted_args setNodeid(String nodeid) {
      this.nodeid = nodeid;
      return this;
    }

    public void unsetNodeid() {
      this.nodeid = null;
    }

    /** Returns true if field nodeid is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeid() {
      return this.nodeid != null;
    }

    public void setNodeidIsSet(boolean value) {
      if (!value) {
        this.nodeid = null;
      }
    }

    public String getBackup() {
      return this.backup;
    }

    public blockLoadCompleted_args setBackup(String backup) {
      this.backup = backup;
      return this;
    }

    public void unsetBackup() {
      this.backup = null;
    }

    /** Returns true if field backup is set (has been assigned a value) and false otherwise */
    public boolean isSetBackup() {
      return this.backup != null;
    }

    public void setBackupIsSet(boolean value) {
      if (!value) {
        this.backup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case BLOKID:
          if (value == null) {
            unsetBlokid();
          } else {
            setBlokid((String)value);
          }
          break;

        case NODEID:
          if (value == null) {
            unsetNodeid();
          } else {
            setNodeid((String)value);
          }
          break;

        case BACKUP:
          if (value == null) {
            unsetBackup();
          } else {
            setBackup((String)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case BLOKID:
          return getBlokid();

        case NODEID:
          return getNodeid();

        case BACKUP:
          return getBackup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case BLOKID:
          return isSetBlokid();
        case NODEID:
          return isSetNodeid();
        case BACKUP:
          return isSetBackup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockLoadCompleted_args)
        return this.equals((blockLoadCompleted_args)that);
      return false;
    }

    public boolean equals(blockLoadCompleted_args that) {
      if (that == null)
        return false;

      boolean this_present_blokid = true && this.isSetBlokid();
      boolean that_present_blokid = true && that.isSetBlokid();
      if (this_present_blokid || that_present_blokid) {
        if (!(this_present_blokid && that_present_blokid))
          return false;
        if (!this.blokid.equals(that.blokid))
          return false;
      }

      boolean this_present_nodeid = true && this.isSetNodeid();
      boolean that_present_nodeid = true && that.isSetNodeid();
      if (this_present_nodeid || that_present_nodeid) {
        if (!(this_present_nodeid && that_present_nodeid))
          return false;
        if (!this.nodeid.equals(that.nodeid))
          return false;
      }

      boolean this_present_backup = true && this.isSetBackup();
      boolean that_present_backup = true && that.isSetBackup();
      if (this_present_backup || that_present_backup) {
        if (!(this_present_backup && that_present_backup))
          return false;
        if (!this.backup.equals(that.backup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_blokid = true && (isSetBlokid());
      list.add(present_blokid);
      if (present_blokid)
        list.add(blokid);

      boolean present_nodeid = true && (isSetNodeid());
      list.add(present_nodeid);
      if (present_nodeid)
        list.add(nodeid);

      boolean present_backup = true && (isSetBackup());
      list.add(present_backup);
      if (present_backup)
        list.add(backup);

      return list.hashCode();
    }

    @Override
    public int compareTo(blockLoadCompleted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBlokid()).compareTo(other.isSetBlokid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlokid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blokid, other.blokid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeid()).compareTo(other.isSetNodeid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeid, other.nodeid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBackup()).compareTo(other.isSetBackup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backup, other.backup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("blockLoadCompleted_args(");
      boolean first = true;

      sb.append("blokid:");
      if (this.blokid == null) {
        sb.append("null");
      } else {
        sb.append(this.blokid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeid:");
      if (this.nodeid == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("backup:");
      if (this.backup == null) {
        sb.append("null");
      } else {
        sb.append(this.backup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class blockLoadCompleted_argsStandardSchemeFactory implements SchemeFactory {
      public blockLoadCompleted_argsStandardScheme getScheme() {
        return new blockLoadCompleted_argsStandardScheme();
      }
    }

    private static class blockLoadCompleted_argsStandardScheme extends StandardScheme<blockLoadCompleted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, blockLoadCompleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // BLOKID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.blokid = iprot.readString();
                struct.setBlokidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeid = iprot.readString();
                struct.setNodeidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BACKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.backup = iprot.readString();
                struct.setBackupIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, blockLoadCompleted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.blokid != null) {
          oprot.writeFieldBegin(BLOKID_FIELD_DESC);
          oprot.writeString(struct.blokid);
          oprot.writeFieldEnd();
        }
        if (struct.nodeid != null) {
          oprot.writeFieldBegin(NODEID_FIELD_DESC);
          oprot.writeString(struct.nodeid);
          oprot.writeFieldEnd();
        }
        if (struct.backup != null) {
          oprot.writeFieldBegin(BACKUP_FIELD_DESC);
          oprot.writeString(struct.backup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class blockLoadCompleted_argsTupleSchemeFactory implements SchemeFactory {
      public blockLoadCompleted_argsTupleScheme getScheme() {
        return new blockLoadCompleted_argsTupleScheme();
      }
    }

    private static class blockLoadCompleted_argsTupleScheme extends TupleScheme<blockLoadCompleted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, blockLoadCompleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBlokid()) {
          optionals.set(0);
        }
        if (struct.isSetNodeid()) {
          optionals.set(1);
        }
        if (struct.isSetBackup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBlokid()) {
          oprot.writeString(struct.blokid);
        }
        if (struct.isSetNodeid()) {
          oprot.writeString(struct.nodeid);
        }
        if (struct.isSetBackup()) {
          oprot.writeString(struct.backup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, blockLoadCompleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.blokid = iprot.readString();
          struct.setBlokidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeid = iprot.readString();
          struct.setNodeidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.backup = iprot.readString();
          struct.setBackupIsSet(true);
        }
      }
    }

  }

  public static class blockLoadCompleted_result implements org.apache.thrift.TBase<blockLoadCompleted_result, blockLoadCompleted_result._Fields>, java.io.Serializable, Cloneable, Comparable<blockLoadCompleted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blockLoadCompleted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new blockLoadCompleted_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new blockLoadCompleted_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blockLoadCompleted_result.class, metaDataMap);
    }

    public blockLoadCompleted_result() {
    }

    public blockLoadCompleted_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockLoadCompleted_result(blockLoadCompleted_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public blockLoadCompleted_result deepCopy() {
      return new blockLoadCompleted_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public blockLoadCompleted_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockLoadCompleted_result)
        return this.equals((blockLoadCompleted_result)that);
      return false;
    }

    public boolean equals(blockLoadCompleted_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(blockLoadCompleted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("blockLoadCompleted_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class blockLoadCompleted_resultStandardSchemeFactory implements SchemeFactory {
      public blockLoadCompleted_resultStandardScheme getScheme() {
        return new blockLoadCompleted_resultStandardScheme();
      }
    }

    private static class blockLoadCompleted_resultStandardScheme extends StandardScheme<blockLoadCompleted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, blockLoadCompleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, blockLoadCompleted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class blockLoadCompleted_resultTupleSchemeFactory implements SchemeFactory {
      public blockLoadCompleted_resultTupleScheme getScheme() {
        return new blockLoadCompleted_resultTupleScheme();
      }
    }

    private static class blockLoadCompleted_resultTupleScheme extends TupleScheme<blockLoadCompleted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, blockLoadCompleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, blockLoadCompleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSplits_args implements org.apache.thrift.TBase<updateSplits_args, updateSplits_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSplits_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSplits_args");

    private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("locations", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSplits_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSplits_argsTupleSchemeFactory());
    }

    public String appid; // required
    public Map<String,String> src; // required
    public Map<String,List<String>> locations; // required
    public Map<String,Long> offset; // required
    public Map<String,Long> length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPID((short)1, "appid"),
      SRC((short)2, "src"),
      LOCATIONS((short)3, "locations"),
      OFFSET((short)4, "offset"),
      LENGTH((short)5, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPID
            return APPID;
          case 2: // SRC
            return SRC;
          case 3: // LOCATIONS
            return LOCATIONS;
          case 4: // OFFSET
            return OFFSET;
          case 5: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("locations", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSplits_args.class, metaDataMap);
    }

    public updateSplits_args() {
    }

    public updateSplits_args(
            String appid,
            Map<String,String> src,
            Map<String,List<String>> locations,
            Map<String,Long> offset,
            Map<String,Long> length)
    {
      this();
      this.appid = appid;
      this.src = src;
      this.locations = locations;
      this.offset = offset;
      this.length = length;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSplits_args(updateSplits_args other) {
      if (other.isSetAppid()) {
        this.appid = other.appid;
      }
      if (other.isSetSrc()) {
        Map<String,String> __this__src = new HashMap<String,String>(other.src);
        this.src = __this__src;
      }
      if (other.isSetLocations()) {
        Map<String,List<String>> __this__locations = new HashMap<String,List<String>>(other.locations.size());
        for (Map.Entry<String, List<String>> other_element : other.locations.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__locations_copy_key = other_element_key;

          List<String> __this__locations_copy_value = new ArrayList<String>(other_element_value);

          __this__locations.put(__this__locations_copy_key, __this__locations_copy_value);
        }
        this.locations = __this__locations;
      }
      if (other.isSetOffset()) {
        Map<String,Long> __this__offset = new HashMap<String,Long>(other.offset);
        this.offset = __this__offset;
      }
      if (other.isSetLength()) {
        Map<String,Long> __this__length = new HashMap<String,Long>(other.length);
        this.length = __this__length;
      }
    }

    public updateSplits_args deepCopy() {
      return new updateSplits_args(this);
    }

    @Override
    public void clear() {
      this.appid = null;
      this.src = null;
      this.locations = null;
      this.offset = null;
      this.length = null;
    }

    public String getAppid() {
      return this.appid;
    }

    public updateSplits_args setAppid(String appid) {
      this.appid = appid;
      return this;
    }

    public void unsetAppid() {
      this.appid = null;
    }

    /** Returns true if field appid is set (has been assigned a value) and false otherwise */
    public boolean isSetAppid() {
      return this.appid != null;
    }

    public void setAppidIsSet(boolean value) {
      if (!value) {
        this.appid = null;
      }
    }

    public int getSrcSize() {
      return (this.src == null) ? 0 : this.src.size();
    }

    public void putToSrc(String key, String val) {
      if (this.src == null) {
        this.src = new HashMap<String,String>();
      }
      this.src.put(key, val);
    }

    public Map<String,String> getSrc() {
      return this.src;
    }

    public updateSplits_args setSrc(Map<String,String> src) {
      this.src = src;
      return this;
    }

    public void unsetSrc() {
      this.src = null;
    }

    /** Returns true if field src is set (has been assigned a value) and false otherwise */
    public boolean isSetSrc() {
      return this.src != null;
    }

    public void setSrcIsSet(boolean value) {
      if (!value) {
        this.src = null;
      }
    }

    public int getLocationsSize() {
      return (this.locations == null) ? 0 : this.locations.size();
    }

    public void putToLocations(String key, List<String> val) {
      if (this.locations == null) {
        this.locations = new HashMap<String,List<String>>();
      }
      this.locations.put(key, val);
    }

    public Map<String,List<String>> getLocations() {
      return this.locations;
    }

    public updateSplits_args setLocations(Map<String,List<String>> locations) {
      this.locations = locations;
      return this;
    }

    public void unsetLocations() {
      this.locations = null;
    }

    /** Returns true if field locations is set (has been assigned a value) and false otherwise */
    public boolean isSetLocations() {
      return this.locations != null;
    }

    public void setLocationsIsSet(boolean value) {
      if (!value) {
        this.locations = null;
      }
    }

    public int getOffsetSize() {
      return (this.offset == null) ? 0 : this.offset.size();
    }

    public void putToOffset(String key, long val) {
      if (this.offset == null) {
        this.offset = new HashMap<String,Long>();
      }
      this.offset.put(key, val);
    }

    public Map<String,Long> getOffset() {
      return this.offset;
    }

    public updateSplits_args setOffset(Map<String,Long> offset) {
      this.offset = offset;
      return this;
    }

    public void unsetOffset() {
      this.offset = null;
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return this.offset != null;
    }

    public void setOffsetIsSet(boolean value) {
      if (!value) {
        this.offset = null;
      }
    }

    public int getLengthSize() {
      return (this.length == null) ? 0 : this.length.size();
    }

    public void putToLength(String key, long val) {
      if (this.length == null) {
        this.length = new HashMap<String,Long>();
      }
      this.length.put(key, val);
    }

    public Map<String,Long> getLength() {
      return this.length;
    }

    public updateSplits_args setLength(Map<String,Long> length) {
      this.length = length;
      return this;
    }

    public void unsetLength() {
      this.length = null;
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return this.length != null;
    }

    public void setLengthIsSet(boolean value) {
      if (!value) {
        this.length = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case APPID:
          if (value == null) {
            unsetAppid();
          } else {
            setAppid((String)value);
          }
          break;

        case SRC:
          if (value == null) {
            unsetSrc();
          } else {
            setSrc((Map<String,String>)value);
          }
          break;

        case LOCATIONS:
          if (value == null) {
            unsetLocations();
          } else {
            setLocations((Map<String,List<String>>)value);
          }
          break;

        case OFFSET:
          if (value == null) {
            unsetOffset();
          } else {
            setOffset((Map<String,Long>)value);
          }
          break;

        case LENGTH:
          if (value == null) {
            unsetLength();
          } else {
            setLength((Map<String,Long>)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case APPID:
          return getAppid();

        case SRC:
          return getSrc();

        case LOCATIONS:
          return getLocations();

        case OFFSET:
          return getOffset();

        case LENGTH:
          return getLength();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case APPID:
          return isSetAppid();
        case SRC:
          return isSetSrc();
        case LOCATIONS:
          return isSetLocations();
        case OFFSET:
          return isSetOffset();
        case LENGTH:
          return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSplits_args)
        return this.equals((updateSplits_args)that);
      return false;
    }

    public boolean equals(updateSplits_args that) {
      if (that == null)
        return false;

      boolean this_present_appid = true && this.isSetAppid();
      boolean that_present_appid = true && that.isSetAppid();
      if (this_present_appid || that_present_appid) {
        if (!(this_present_appid && that_present_appid))
          return false;
        if (!this.appid.equals(that.appid))
          return false;
      }

      boolean this_present_src = true && this.isSetSrc();
      boolean that_present_src = true && that.isSetSrc();
      if (this_present_src || that_present_src) {
        if (!(this_present_src && that_present_src))
          return false;
        if (!this.src.equals(that.src))
          return false;
      }

      boolean this_present_locations = true && this.isSetLocations();
      boolean that_present_locations = true && that.isSetLocations();
      if (this_present_locations || that_present_locations) {
        if (!(this_present_locations && that_present_locations))
          return false;
        if (!this.locations.equals(that.locations))
          return false;
      }

      boolean this_present_offset = true && this.isSetOffset();
      boolean that_present_offset = true && that.isSetOffset();
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (!this.offset.equals(that.offset))
          return false;
      }

      boolean this_present_length = true && this.isSetLength();
      boolean that_present_length = true && that.isSetLength();
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (!this.length.equals(that.length))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appid = true && (isSetAppid());
      list.add(present_appid);
      if (present_appid)
        list.add(appid);

      boolean present_src = true && (isSetSrc());
      list.add(present_src);
      if (present_src)
        list.add(src);

      boolean present_locations = true && (isSetLocations());
      list.add(present_locations);
      if (present_locations)
        list.add(locations);

      boolean present_offset = true && (isSetOffset());
      list.add(present_offset);
      if (present_offset)
        list.add(offset);

      boolean present_length = true && (isSetLength());
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSplits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocations()).compareTo(other.isSetLocations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locations, other.locations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSplits_args(");
      boolean first = true;

      sb.append("appid:");
      if (this.appid == null) {
        sb.append("null");
      } else {
        sb.append(this.appid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("src:");
      if (this.src == null) {
        sb.append("null");
      } else {
        sb.append(this.src);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locations:");
      if (this.locations == null) {
        sb.append("null");
      } else {
        sb.append(this.locations);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      if (this.offset == null) {
        sb.append("null");
      } else {
        sb.append(this.offset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      if (this.length == null) {
        sb.append("null");
      } else {
        sb.append(this.length);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSplits_argsStandardSchemeFactory implements SchemeFactory {
      public updateSplits_argsStandardScheme getScheme() {
        return new updateSplits_argsStandardScheme();
      }
    }

    private static class updateSplits_argsStandardScheme extends StandardScheme<updateSplits_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSplits_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // APPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appid = iprot.readString();
                struct.setAppidIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.src = new HashMap<String,String>(2*_map54.size);
                  String _key55;
                  String _val56;
                  for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                  {
                    _key55 = iprot.readString();
                    _val56 = iprot.readString();
                    struct.src.put(_key55, _val56);
                  }
                  iprot.readMapEnd();
                }
                struct.setSrcIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.locations = new HashMap<String,List<String>>(2*_map58.size);
                  String _key59;
                  List<String> _val60;
                  for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                  {
                    _key59 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                      _val60 = new ArrayList<String>(_list62.size);
                      String _elem63;
                      for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                      {
                        _elem63 = iprot.readString();
                        _val60.add(_elem63);
                      }
                      iprot.readListEnd();
                    }
                    struct.locations.put(_key59, _val60);
                  }
                  iprot.readMapEnd();
                }
                struct.setLocationsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                  struct.offset = new HashMap<String,Long>(2*_map65.size);
                  String _key66;
                  long _val67;
                  for (int _i68 = 0; _i68 < _map65.size; ++_i68)
                  {
                    _key66 = iprot.readString();
                    _val67 = iprot.readI64();
                    struct.offset.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setOffsetIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
                  struct.length = new HashMap<String,Long>(2*_map69.size);
                  String _key70;
                  long _val71;
                  for (int _i72 = 0; _i72 < _map69.size; ++_i72)
                  {
                    _key70 = iprot.readString();
                    _val71 = iprot.readI64();
                    struct.length.put(_key70, _val71);
                  }
                  iprot.readMapEnd();
                }
                struct.setLengthIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSplits_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appid != null) {
          oprot.writeFieldBegin(APPID_FIELD_DESC);
          oprot.writeString(struct.appid);
          oprot.writeFieldEnd();
        }
        if (struct.src != null) {
          oprot.writeFieldBegin(SRC_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.src.size()));
            for (Map.Entry<String, String> _iter73 : struct.src.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              oprot.writeString(_iter73.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.locations != null) {
          oprot.writeFieldBegin(LOCATIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.locations.size()));
            for (Map.Entry<String, List<String>> _iter74 : struct.locations.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter74.getValue().size()));
                for (String _iter75 : _iter74.getValue())
                {
                  oprot.writeString(_iter75);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.offset != null) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.offset.size()));
            for (Map.Entry<String, Long> _iter76 : struct.offset.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              oprot.writeI64(_iter76.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.length != null) {
          oprot.writeFieldBegin(LENGTH_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.length.size()));
            for (Map.Entry<String, Long> _iter77 : struct.length.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              oprot.writeI64(_iter77.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSplits_argsTupleSchemeFactory implements SchemeFactory {
      public updateSplits_argsTupleScheme getScheme() {
        return new updateSplits_argsTupleScheme();
      }
    }

    private static class updateSplits_argsTupleScheme extends TupleScheme<updateSplits_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppid()) {
          optionals.set(0);
        }
        if (struct.isSetSrc()) {
          optionals.set(1);
        }
        if (struct.isSetLocations()) {
          optionals.set(2);
        }
        if (struct.isSetOffset()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppid()) {
          oprot.writeString(struct.appid);
        }
        if (struct.isSetSrc()) {
          {
            oprot.writeI32(struct.src.size());
            for (Map.Entry<String, String> _iter78 : struct.src.entrySet())
            {
              oprot.writeString(_iter78.getKey());
              oprot.writeString(_iter78.getValue());
            }
          }
        }
        if (struct.isSetLocations()) {
          {
            oprot.writeI32(struct.locations.size());
            for (Map.Entry<String, List<String>> _iter79 : struct.locations.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              {
                oprot.writeI32(_iter79.getValue().size());
                for (String _iter80 : _iter79.getValue())
                {
                  oprot.writeString(_iter80);
                }
              }
            }
          }
        }
        if (struct.isSetOffset()) {
          {
            oprot.writeI32(struct.offset.size());
            for (Map.Entry<String, Long> _iter81 : struct.offset.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeI64(_iter81.getValue());
            }
          }
        }
        if (struct.isSetLength()) {
          {
            oprot.writeI32(struct.length.size());
            for (Map.Entry<String, Long> _iter82 : struct.length.entrySet())
            {
              oprot.writeString(_iter82.getKey());
              oprot.writeI64(_iter82.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSplits_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appid = iprot.readString();
          struct.setAppidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map83 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.src = new HashMap<String,String>(2*_map83.size);
            String _key84;
            String _val85;
            for (int _i86 = 0; _i86 < _map83.size; ++_i86)
            {
              _key84 = iprot.readString();
              _val85 = iprot.readString();
              struct.src.put(_key84, _val85);
            }
          }
          struct.setSrcIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map87 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.locations = new HashMap<String,List<String>>(2*_map87.size);
            String _key88;
            List<String> _val89;
            for (int _i90 = 0; _i90 < _map87.size; ++_i90)
            {
              _key88 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val89 = new ArrayList<String>(_list91.size);
                String _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = iprot.readString();
                  _val89.add(_elem92);
                }
              }
              struct.locations.put(_key88, _val89);
            }
          }
          struct.setLocationsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.offset = new HashMap<String,Long>(2*_map94.size);
            String _key95;
            long _val96;
            for (int _i97 = 0; _i97 < _map94.size; ++_i97)
            {
              _key95 = iprot.readString();
              _val96 = iprot.readI64();
              struct.offset.put(_key95, _val96);
            }
          }
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map98 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.length = new HashMap<String,Long>(2*_map98.size);
            String _key99;
            long _val100;
            for (int _i101 = 0; _i101 < _map98.size; ++_i101)
            {
              _key99 = iprot.readString();
              _val100 = iprot.readI64();
              struct.length.put(_key99, _val100);
            }
          }
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class updateSplits_result implements org.apache.thrift.TBase<updateSplits_result, updateSplits_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSplits_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSplits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSplits_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSplits_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSplits_result.class, metaDataMap);
    }

    public updateSplits_result() {
    }

    public updateSplits_result(
            boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSplits_result(updateSplits_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateSplits_result deepCopy() {
      return new updateSplits_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateSplits_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSplits_result)
        return this.equals((updateSplits_result)that);
      return false;
    }

    public boolean equals(updateSplits_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSplits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSplits_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSplits_resultStandardSchemeFactory implements SchemeFactory {
      public updateSplits_resultStandardScheme getScheme() {
        return new updateSplits_resultStandardScheme();
      }
    }

    private static class updateSplits_resultStandardScheme extends StandardScheme<updateSplits_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSplits_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSplits_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSplits_resultTupleSchemeFactory implements SchemeFactory {
      public updateSplits_resultTupleScheme getScheme() {
        return new updateSplits_resultTupleScheme();
      }
    }

    private static class updateSplits_resultTupleScheme extends TupleScheme<updateSplits_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSplits_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
